// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package zuora.ots_login_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: OTS_Login Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 6.1.1.20151214_1327
 * @status 
 */
public class OTS_Login implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "OTS_Login";
	private final String projectName = "ZUORA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = java.util.Collections
			.synchronizedMap(new java.util.HashMap<String, Object>());

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					OTS_Login.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(OTS_Login.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tSetGlobalVar_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSOAP_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputXML_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tFileInputXML_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputXML_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWriteJSONField_2_Out_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		tWriteJSONField_2_In_error(exception, errorComponent, globalMap);

	}

	public void tWriteJSONField_2_In_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputXML_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWriteJSONField_2_In_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetGlobalVar_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 main ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				globalMap.put("user", "zuora.support@zuoratest.reply.it");
				globalMap.put("psw", "Zuora16!");
				globalMap.put("stage", "LOGIN");

				tos_count_tSetGlobalVar_1++;

				/**
				 * [tSetGlobalVar_1 main ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tSetGlobalVar_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFixedFlowInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_Login = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_Login = new byte[0];

		public routines.system.Document Soap;

		public routines.system.Document getSoap() {
			return this.Soap;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_Login) {

				try {

					int length = 0;

					this.Soap = (routines.system.Document) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Document

				dos.writeObject(this.Soap);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Soap=" + String.valueOf(Soap));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class credentialsStruct implements
			routines.system.IPersistableRow<credentialsStruct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_Login = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_Login = new byte[0];

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String password;

		public String getPassword() {
			return this.password;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_Login.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_Login.length == 0) {
						commonByteArray_ZUORA_OTS_Login = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_Login = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_Login, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_Login, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_Login) {

				try {

					int length = 0;

					this.username = readString(dis);

					this.password = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.username, dos);

				// String

				writeString(this.password, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("username=" + username);
			sb.append(",password=" + password);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(credentialsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				credentialsStruct credentials = new credentialsStruct();
				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputXML_1 begin ] start
				 */

				ok_Hash.put("tFileOutputXML_1", false);
				start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				currentComponent = "tFileOutputXML_1";

				int tos_count_tFileOutputXML_1 = 0;

				String originalFileName_tFileOutputXML_1 = "C:/ETL_FASTWEB/ZUORA/data/responses/ots/login.xml";
				java.io.File originalFile_tFileOutputXML_1 = new java.io.File(
						originalFileName_tFileOutputXML_1);

				String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
				java.io.File file_tFileOutputXML_1 = new java.io.File(
						fileName_tFileOutputXML_1);
				if (!file_tFileOutputXML_1.isAbsolute()) {
					file_tFileOutputXML_1 = file_tFileOutputXML_1
							.getCanonicalFile();
				}

				// create directory only if not exists

				file_tFileOutputXML_1.getParentFile().mkdirs();

				int nb_line_tFileOutputXML_1 = 0;
				org.dom4j.io.OutputFormat format_tFileOutputXML_1 = org.dom4j.io.OutputFormat
						.createPrettyPrint();
				format_tFileOutputXML_1.setEncoding("ISO-8859-15");
				format_tFileOutputXML_1.setNewLineAfterDeclaration(false);
				format_tFileOutputXML_1.setTrimText(false);
				org.dom4j.io.XMLWriter writer_tFileOutputXML_1 = new org.dom4j.io.XMLWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										file_tFileOutputXML_1), "ISO-8859-15"),
						format_tFileOutputXML_1);

				/**
				 * [tFileOutputXML_1 begin ] stop
				 */

				/**
				 * [tSOAP_1 begin ] start
				 */

				ok_Hash.put("tSOAP_1", false);
				start_Hash.put("tSOAP_1", System.currentTimeMillis());

				currentComponent = "tSOAP_1";

				int tos_count_tSOAP_1 = 0;

				org.talend.soap.SOAPUtil soapUtil_tSOAP_1 = new org.talend.soap.SOAPUtil();

				final String decryptedPassword_tSOAP_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				/**
				 * [tSOAP_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {

					credentials.username = (String) globalMap.get("user");

					credentials.password = (String) globalMap.get("psw");

					/**
					 * [tFixedFlowInput_1 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_1 main ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					tos_count_tFixedFlowInput_1++;

					/**
					 * [tFixedFlowInput_1 main ] stop
					 */

					/**
					 * [tSOAP_1 main ] start
					 */

					currentComponent = "tSOAP_1";

					String document_tSOAP_1 = soapUtil_tSOAP_1
							.extractContentAsDocument(
									org.talend.soap.SOAPUtil.SOAP11,
									"https://apisandbox.zuora.com/apps/services/a/75.0",
									"http://api.zuora.com/login",
									"<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:api=\"http://api.zuora.com/\">     <soapenv:Header/>     <soapenv:Body>        <api:login>           <api:username>"
											+ credentials.username
											+ "</api:username>           <api:password>"
											+ credentials.password
											+ "</api:password>        </api:login>     </soapenv:Body>  </soapenv:Envelope>");

					// for output

					row1 = new row1Struct();

					row1.Soap = ParserUtils.parseTo_Document(document_tSOAP_1);

					tos_count_tSOAP_1++;

					/**
					 * [tSOAP_1 main ] stop
					 */

					/**
					 * [tFileOutputXML_1 main ] start
					 */

					currentComponent = "tFileOutputXML_1";

					nb_line_tFileOutputXML_1++;
					writer_tFileOutputXML_1.write(row1.Soap.getDocument());

					tos_count_tFileOutputXML_1++;

					/**
					 * [tFileOutputXML_1 main ] stop
					 */

					/**
					 * [tFixedFlowInput_1 end ] start
					 */

					currentComponent = "tFixedFlowInput_1";

				}
				globalMap.put("tFixedFlowInput_1_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tSOAP_1 end ] start
				 */

				currentComponent = "tSOAP_1";

				soapUtil_tSOAP_1.close();

				ok_Hash.put("tSOAP_1", true);
				end_Hash.put("tSOAP_1", System.currentTimeMillis());

				/**
				 * [tSOAP_1 end ] stop
				 */

				/**
				 * [tFileOutputXML_1 end ] start
				 */

				currentComponent = "tFileOutputXML_1";

				writer_tFileOutputXML_1.close();

				ok_Hash.put("tFileOutputXML_1", true);
				end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				/**
				 * [tFileOutputXML_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tFixedFlowInput_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileInputXML_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tSOAP_1 finally ] start
				 */

				currentComponent = "tSOAP_1";

				/**
				 * [tSOAP_1 finally ] stop
				 */

				/**
				 * [tFileOutputXML_1 finally ] start
				 */

				currentComponent = "tFileOutputXML_1";

				/**
				 * [tFileOutputXML_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public static class stage_OKStruct implements
			routines.system.IPersistableRow<stage_OKStruct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_Login = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_Login = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public Object stage;

		public Object getStage() {
			return this.stage;
		}

		public Object result;

		public Object getResult() {
			return this.result;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		public String server_url;

		public String getServer_url() {
			return this.server_url;
		}

		public String session;

		public String getSession() {
			return this.session;
		}

		public java.util.Date timestamp;

		public java.util.Date getTimestamp() {
			return this.timestamp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final stage_OKStruct other = (stage_OKStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(stage_OKStruct other) {

			other.id = this.id;
			other.stage = this.stage;
			other.result = this.result;
			other.error = this.error;
			other.server_url = this.server_url;
			other.session = this.session;
			other.timestamp = this.timestamp;

		}

		public void copyKeysDataTo(stage_OKStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_Login.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_Login.length == 0) {
						commonByteArray_ZUORA_OTS_Login = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_Login = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_Login, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_Login, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_Login) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.stage = (Object) dis.readObject();

					this.result = (Object) dis.readObject();

					this.error = readString(dis);

					this.server_url = readString(dis);

					this.session = readString(dis);

					this.timestamp = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// Object

				dos.writeObject(this.stage);

				// Object

				dos.writeObject(this.result);

				// String

				writeString(this.error, dos);

				// String

				writeString(this.server_url, dos);

				// String

				writeString(this.session, dos);

				// java.util.Date

				writeDate(this.timestamp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",stage=" + String.valueOf(stage));
			sb.append(",result=" + String.valueOf(result));
			sb.append(",error=" + error);
			sb.append(",server_url=" + server_url);
			sb.append(",session=" + session);
			sb.append(",timestamp=" + String.valueOf(timestamp));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(stage_OKStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_Login = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_Login = new byte[0];

		public String Session;

		public String getSession() {
			return this.Session;
		}

		public String ServerUrl;

		public String getServerUrl() {
			return this.ServerUrl;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_Login.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_Login.length == 0) {
						commonByteArray_ZUORA_OTS_Login = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_Login = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_Login, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_Login, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_Login) {

				try {

					int length = 0;

					this.Session = readString(dis);

					this.ServerUrl = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Session, dos);

				// String

				writeString(this.ServerUrl, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Session=" + Session);
			sb.append(",ServerUrl=" + ServerUrl);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				stage_OKStruct stage_OK = new stage_OKStruct();

				/**
				 * [tMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_3", false);
				start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_3";

				int tos_count_tMysqlOutput_3 = 0;

				int nb_line_tMysqlOutput_3 = 0;
				int nb_line_update_tMysqlOutput_3 = 0;
				int nb_line_inserted_tMysqlOutput_3 = 0;
				int nb_line_deleted_tMysqlOutput_3 = 0;
				int nb_line_rejected_tMysqlOutput_3 = 0;

				int deletedCount_tMysqlOutput_3 = 0;
				int updatedCount_tMysqlOutput_3 = 0;
				int insertedCount_tMysqlOutput_3 = 0;

				int rejectedCount_tMysqlOutput_3 = 0;

				String tableName_tMysqlOutput_3 = "ots_job_state";
				boolean whetherReject_tMysqlOutput_3 = false;

				java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime()
						.getTime();
				calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3
						.getTime().getTime();
				long date_tMysqlOutput_3;

				java.sql.Connection conn_tMysqlOutput_3 = null;
				String dbProperties_tMysqlOutput_3 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_3 = null;
				if (dbProperties_tMysqlOutput_3 == null
						|| dbProperties_tMysqlOutput_3.trim().length() == 0) {
					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "fw_zuora" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "fw_zuora" + "?"
							+ properties_tMysqlOutput_3;
				}
				String driverClass_tMysqlOutput_3 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_3 = "root";

				final String decryptedPassword_tMysqlOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tMysqlOutput_3 = decryptedPassword_tMysqlOutput_3;
				java.lang.Class.forName(driverClass_tMysqlOutput_3);

				conn_tMysqlOutput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_3, dbUser_tMysqlOutput_3,
						dbPwd_tMysqlOutput_3);

				resourceMap.put("conn_tMysqlOutput_3", conn_tMysqlOutput_3);
				conn_tMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tMysqlOutput_3 = 10000;
				int commitCounter_tMysqlOutput_3 = 0;

				int count_tMysqlOutput_3 = 0;

				String insert_tMysqlOutput_3 = "INSERT INTO `"
						+ "ots_job_state"
						+ "` (`id`,`stage`,`result`,`error`,`server_url`,`session`,`timestamp`) VALUES (?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_3 = 100;
				int batchSizeCounter_tMysqlOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3
						.prepareStatement(insert_tMysqlOutput_3);

				/**
				 * [tMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				stage_OKStruct stage_OK_tmp = new stage_OKStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputXML_2 begin ] start
				 */

				ok_Hash.put("tFileInputXML_2", false);
				start_Hash.put("tFileInputXML_2", System.currentTimeMillis());

				currentComponent = "tFileInputXML_2";

				int tos_count_tFileInputXML_2 = 0;

				int nb_line_tFileInputXML_2 = 0;

				String os_tFileInputXML_2 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_2 = false;
				if (os_tFileInputXML_2.indexOf("windows") > -1
						|| os_tFileInputXML_2.indexOf("nt") > -1) {
					isWindows_tFileInputXML_2 = true;
				}
				class NameSpaceTool_tFileInputXML_2 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression,
							String basePath) {
						return util.addDefaultNSPrefix(relativeXpression,
								basePath);
					}

				}

				class XML_API_tFileInputXML_2 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_2 = null;
				try {
					filename_tFileInputXML_2 = "C:/ETL_FASTWEB/ZUORA/data/responses/ots/login.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_2 != null
						&& filename_tFileInputXML_2 instanceof String
						&& filename_tFileInputXML_2.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_2) {
						filename_tFileInputXML_2 = filename_tFileInputXML_2
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_2 = true;
				org.dom4j.Document doc_tFileInputXML_2 = null;
				java.io.Closeable toClose_tFileInputXML_2 = null;
				try {
					if (filename_tFileInputXML_2 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream) filename_tFileInputXML_2;
						toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
						doc_tFileInputXML_2 = reader_tFileInputXML_2
								.read(inputStream_tFileInputXML_2);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_2)),
								"ISO-8859-15");
						toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
						org.xml.sax.InputSource in_tFileInputXML_2 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_2);
						doc_tFileInputXML_2 = reader_tFileInputXML_2
								.read(in_tFileInputXML_2);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_2 = false;
				} finally {
					if (toClose_tFileInputXML_2 != null) {
						toClose_tFileInputXML_2.close();
					}
				}
				if (isValidFile_tFileInputXML_2) {
					NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
					nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2
							.createXPath(nsTool_tFileInputXML_2
									.addDefaultNSPrefix("/soapenv:Envelope/soapenv:Body/ns1:loginResponse/ns1:result"));
					x_tFileInputXML_2
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_2
							.selectNodes(doc_tFileInputXML_2);
					XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
					String str_tFileInputXML_2 = "";
					org.dom4j.Node node_tFileInputXML_2 = null;

					// init all mapping xpaths
					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_2 : nodeList_tFileInputXML_2) {
						nb_line_tFileInputXML_2++;
						row2 = null;
						boolean whetherReject_tFileInputXML_2 = false;
						row2 = new row2Struct();
						try {
							org.dom4j.XPath xTmp0_tFileInputXML_2 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_2
											.addDefaultNSPrefix("ns1:Session",
													"/soapenv:Envelope/soapenv:Body/ns1:loginResponse/ns1:result"));
							xTmp0_tFileInputXML_2
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2);
							Object obj0_tFileInputXML_2 = xTmp0_tFileInputXML_2
									.evaluate(temp_tFileInputXML_2);
							if (obj0_tFileInputXML_2 == null) {
								node_tFileInputXML_2 = null;
								str_tFileInputXML_2 = "";

							} else if (obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
								node_tFileInputXML_2 = (org.dom4j.Node) obj0_tFileInputXML_2;
								str_tFileInputXML_2 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_2,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_2 instanceof String
									|| obj0_tFileInputXML_2 instanceof Number) {
								node_tFileInputXML_2 = temp_tFileInputXML_2;
								str_tFileInputXML_2 = String
										.valueOf(obj0_tFileInputXML_2);
							} else if (obj0_tFileInputXML_2 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_2;
								node_tFileInputXML_2 = nodes_tFileInputXML_2
										.size() > 0 ? nodes_tFileInputXML_2
										.get(0) : null;
								str_tFileInputXML_2 = node_tFileInputXML_2 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_2,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_2
									.isDefNull(node_tFileInputXML_2)) {
								row2.Session = null;
							} else if (xml_api_tFileInputXML_2
									.isEmpty(node_tFileInputXML_2)) {
								row2.Session = "";
							} else if (xml_api_tFileInputXML_2
									.isMissing(node_tFileInputXML_2)) {
								row2.Session = null;
							} else {
								row2.Session = str_tFileInputXML_2;
							}
							org.dom4j.XPath xTmp1_tFileInputXML_2 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_2
											.addDefaultNSPrefix(
													"ns1:ServerUrl",
													"/soapenv:Envelope/soapenv:Body/ns1:loginResponse/ns1:result"));
							xTmp1_tFileInputXML_2
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2);
							Object obj1_tFileInputXML_2 = xTmp1_tFileInputXML_2
									.evaluate(temp_tFileInputXML_2);
							if (obj1_tFileInputXML_2 == null) {
								node_tFileInputXML_2 = null;
								str_tFileInputXML_2 = "";

							} else if (obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
								node_tFileInputXML_2 = (org.dom4j.Node) obj1_tFileInputXML_2;
								str_tFileInputXML_2 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_2,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_2 instanceof String
									|| obj1_tFileInputXML_2 instanceof Number) {
								node_tFileInputXML_2 = temp_tFileInputXML_2;
								str_tFileInputXML_2 = String
										.valueOf(obj1_tFileInputXML_2);
							} else if (obj1_tFileInputXML_2 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_2;
								node_tFileInputXML_2 = nodes_tFileInputXML_2
										.size() > 0 ? nodes_tFileInputXML_2
										.get(0) : null;
								str_tFileInputXML_2 = node_tFileInputXML_2 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_2,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_2
									.isDefNull(node_tFileInputXML_2)) {
								row2.ServerUrl = null;
							} else if (xml_api_tFileInputXML_2
									.isEmpty(node_tFileInputXML_2)) {
								row2.ServerUrl = "";
							} else if (xml_api_tFileInputXML_2
									.isMissing(node_tFileInputXML_2)) {
								row2.ServerUrl = null;
							} else {
								row2.ServerUrl = str_tFileInputXML_2;
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_2 = true;
							System.err.println(e.getMessage());
							row2 = null;
						}

						if (nb_line_tFileInputXML_2 > 50) {

							break;
						}

						/**
						 * [tFileInputXML_2 begin ] stop
						 */

						/**
						 * [tFileInputXML_2 main ] start
						 */

						currentComponent = "tFileInputXML_2";

						tos_count_tFileInputXML_2++;

						/**
						 * [tFileInputXML_2 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								stage_OK = null;

								// # Output table : 'stage_OK'
								stage_OK_tmp.id = 0;
								stage_OK_tmp.stage = (String) globalMap
										.get("stage");
								stage_OK_tmp.result = "OK";
								stage_OK_tmp.error = null;
								stage_OK_tmp.server_url = row2.ServerUrl;
								stage_OK_tmp.session = row2.Session;
								stage_OK_tmp.timestamp = TalendDate
										.getCurrentDate();
								stage_OK = stage_OK_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "stage_OK"
							if (stage_OK != null) {

								/**
								 * [tMysqlOutput_3 main ] start
								 */

								currentComponent = "tMysqlOutput_3";

								whetherReject_tMysqlOutput_3 = false;
								pstmt_tMysqlOutput_3.setLong(1, stage_OK.id);

								if (stage_OK.stage == null) {
									pstmt_tMysqlOutput_3.setNull(2,
											java.sql.Types.OTHER);
								} else {
									pstmt_tMysqlOutput_3.setObject(2,
											stage_OK.stage);
								}

								if (stage_OK.result == null) {
									pstmt_tMysqlOutput_3.setNull(3,
											java.sql.Types.OTHER);
								} else {
									pstmt_tMysqlOutput_3.setObject(3,
											stage_OK.result);
								}

								if (stage_OK.error == null) {
									pstmt_tMysqlOutput_3.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_3.setString(4,
											stage_OK.error);
								}

								if (stage_OK.server_url == null) {
									pstmt_tMysqlOutput_3.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_3.setString(5,
											stage_OK.server_url);
								}

								if (stage_OK.session == null) {
									pstmt_tMysqlOutput_3.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_3.setString(6,
											stage_OK.session);
								}

								if (stage_OK.timestamp != null) {
									date_tMysqlOutput_3 = stage_OK.timestamp
											.getTime();
									if (date_tMysqlOutput_3 < year1_tMysqlOutput_3
											|| date_tMysqlOutput_3 >= year10000_tMysqlOutput_3) {
										pstmt_tMysqlOutput_3.setString(7,
												"0000-00-00 00:00:00");
									} else {
										pstmt_tMysqlOutput_3.setTimestamp(7,
												new java.sql.Timestamp(
														date_tMysqlOutput_3));
									}
								} else {
									pstmt_tMysqlOutput_3.setNull(7,
											java.sql.Types.DATE);
								}

								pstmt_tMysqlOutput_3.addBatch();
								nb_line_tMysqlOutput_3++;

								batchSizeCounter_tMysqlOutput_3++;
								if (batchSize_tMysqlOutput_3 <= batchSizeCounter_tMysqlOutput_3) {
									try {
										int countSum_tMysqlOutput_3 = 0;
										for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
												.executeBatch()) {
											countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
													: 1);
										}
										insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tMysqlOutput_3 = 0;
										for (int countEach_tMysqlOutput_3 : e
												.getUpdateCounts()) {
											countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
													: countEach_tMysqlOutput_3);
										}
										insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
										System.err.println(e.getMessage());
									}

									batchSizeCounter_tMysqlOutput_3 = 0;
								}
								commitCounter_tMysqlOutput_3++;

								if (commitEvery_tMysqlOutput_3 <= commitCounter_tMysqlOutput_3) {

									try {
										int countSum_tMysqlOutput_3 = 0;
										for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
												.executeBatch()) {
											countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
													: 1);
										}
										insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tMysqlOutput_3 = 0;
										for (int countEach_tMysqlOutput_3 : e
												.getUpdateCounts()) {
											countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
													: countEach_tMysqlOutput_3);
										}
										insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
										System.err.println(e.getMessage());

									}
									conn_tMysqlOutput_3.commit();
									commitCounter_tMysqlOutput_3 = 0;

								}

								tos_count_tMysqlOutput_3++;

								/**
								 * [tMysqlOutput_3 main ] stop
								 */

							} // End of branch "stage_OK"

						} // End of branch "row2"

						/**
						 * [tFileInputXML_2 end ] start
						 */

						currentComponent = "tFileInputXML_2";

					}
				}
				globalMap.put("tFileInputXML_2_NB_LINE",
						nb_line_tFileInputXML_2);

				ok_Hash.put("tFileInputXML_2", true);
				end_Hash.put("tFileInputXML_2", System.currentTimeMillis());

				/**
				 * [tFileInputXML_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_3 end ] start
				 */

				currentComponent = "tMysqlOutput_3";

				try {
					if (batchSizeCounter_tMysqlOutput_3 != 0) {
						int countSum_tMysqlOutput_3 = 0;

						for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
								.executeBatch()) {
							countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_3 = 0;
					for (int countEach_tMysqlOutput_3 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
								: countEach_tMysqlOutput_3);
					}

					insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_3 = 0;

				if (pstmt_tMysqlOutput_3 != null) {

					pstmt_tMysqlOutput_3.close();

				}

				if (commitCounter_tMysqlOutput_3 > 0) {

					conn_tMysqlOutput_3.commit();

				}

				conn_tMysqlOutput_3.close();

				resourceMap.put("finish_tMysqlOutput_3", true);

				nb_line_deleted_tMysqlOutput_3 = nb_line_deleted_tMysqlOutput_3
						+ deletedCount_tMysqlOutput_3;
				nb_line_update_tMysqlOutput_3 = nb_line_update_tMysqlOutput_3
						+ updatedCount_tMysqlOutput_3;
				nb_line_inserted_tMysqlOutput_3 = nb_line_inserted_tMysqlOutput_3
						+ insertedCount_tMysqlOutput_3;
				nb_line_rejected_tMysqlOutput_3 = nb_line_rejected_tMysqlOutput_3
						+ rejectedCount_tMysqlOutput_3;

				globalMap.put("tMysqlOutput_3_NB_LINE", nb_line_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_3);

				ok_Hash.put("tMysqlOutput_3", true);
				end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_2 finally ] start
				 */

				currentComponent = "tFileInputXML_2";

				/**
				 * [tFileInputXML_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_3 finally ] start
				 */

				currentComponent = "tMysqlOutput_3";

				if (resourceMap.get("finish_tMysqlOutput_3") == null) {
					if (resourceMap.get("conn_tMysqlOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_3) {
							String errorMessage_tMysqlOutput_3 = "failed to close the connection in tMysqlOutput_3 :"
									+ sqlEx_tMysqlOutput_3.getMessage();

							System.err.println(errorMessage_tMysqlOutput_3);
						}
					}
				}

				/**
				 * [tMysqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_Login = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_Login = new byte[0];

		public String faultcode;

		public String getFaultcode() {
			return this.faultcode;
		}

		public String faultstring;

		public String getFaultstring() {
			return this.faultstring;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_Login.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_Login.length == 0) {
						commonByteArray_ZUORA_OTS_Login = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_Login = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_Login, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_Login, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_Login) {

				try {

					int length = 0;

					this.faultcode = readString(dis);

					this.faultstring = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.faultcode, dos);

				// String

				writeString(this.faultstring, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("faultcode=" + faultcode);
			sb.append(",faultstring=" + faultstring);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputXML_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tWriteJSONField_2_Out begin ] start
				 */

				ok_Hash.put("tWriteJSONField_2_Out", false);
				start_Hash.put("tWriteJSONField_2_Out",
						System.currentTimeMillis());

				currentVirtualComponent = "tWriteJSONField_2";

				currentComponent = "tWriteJSONField_2_Out";

				int tos_count_tWriteJSONField_2_Out = 0;

				// tWriteXMLFieldOut_begin
				int nb_line_tWriteJSONField_2_Out = 0;
				boolean needRoot_tWriteJSONField_2_Out = true;

				String strCompCache_tWriteJSONField_2_Out = null;

				java.util.Queue<row3Struct> listGroupby_tWriteJSONField_2_Out = new java.util.concurrent.ConcurrentLinkedQueue<row3Struct>();

				class ThreadXMLField_tWriteJSONField_2_Out extends Thread {

					java.util.Queue<row3Struct> queue;

					java.util.List<java.util.Map<String, String>> flows;
					java.lang.Exception lastException;
					String currentComponent;

					ThreadXMLField_tWriteJSONField_2_Out(java.util.Queue q) {
						this.queue = q;
						globalMap.put("queue_tWriteJSONField_2_In", queue);
						lastException = null;
					}

					ThreadXMLField_tWriteJSONField_2_Out(java.util.Queue q,
							java.util.List<java.util.Map<String, String>> l) {
						this.queue = q;
						this.flows = l;
						lastException = null;
						globalMap.put("queue_tWriteJSONField_2_In", queue);
						globalMap.put("flows_tWriteJSONField_2_In", flows);
					}

					public java.lang.Exception getLastException() {
						return this.lastException;
					}

					public String getCurrentComponent() {
						return this.currentComponent;
					}

					@Override
					public void run() {
						try {
							tWriteJSONField_2_InProcess(globalMap);
						} catch (TalendException te) {
							this.lastException = te.getException();
							this.currentComponent = te.getCurrentComponent();
						}
					}
				}

				ThreadXMLField_tWriteJSONField_2_Out txf_tWriteJSONField_2_Out = new ThreadXMLField_tWriteJSONField_2_Out(
						listGroupby_tWriteJSONField_2_Out);

				txf_tWriteJSONField_2_Out.start();

				java.util.List<java.util.List<String>> groupbyList_tWriteJSONField_2_Out = new java.util.ArrayList<java.util.List<String>>();
				java.util.Map<String, String> valueMap_tWriteJSONField_2_Out = new java.util.HashMap<String, String>();

				class NestXMLTool_tWriteJSONField_2_Out {
					public void parseAndAdd(org.dom4j.Element nestRoot,
							String value) {
						try {
							org.dom4j.Document doc4Str = org.dom4j.DocumentHelper
									.parseText("<root>" + value + "</root>");
							nestRoot.setContent(doc4Str.getRootElement()
									.content());
						} catch (java.lang.Exception e) {
							e.printStackTrace();
							nestRoot.setText(value);
						}
					}

					public void setText(org.dom4j.Element element, String value) {
						if (value.startsWith("<![CDATA[")
								&& value.endsWith("]]>")) {
							String text = value
									.substring(9, value.length() - 3);
							element.addCDATA(text);
						} else {
							element.setText(value);
						}
					}

					public void replaceDefaultNameSpace(
							org.dom4j.Element nestRoot) {
						if (nestRoot != null) {
							for (org.dom4j.Element tmp : (java.util.List<org.dom4j.Element>) nestRoot
									.elements()) {
								if (("").equals(tmp.getQName().getNamespace()
										.getURI())
										&& ("").equals(tmp.getQName()
												.getNamespace().getPrefix())) {
									tmp.setQName(org.dom4j.DocumentHelper
											.createQName(tmp.getName(),
													nestRoot.getQName()
															.getNamespace()));
								}
								replaceDefaultNameSpace(tmp);
							}
						}
					}

					public void removeEmptyElement(org.dom4j.Element root) {
						if (root != null) {
							for (org.dom4j.Element tmp : (java.util.List<org.dom4j.Element>) root
									.elements()) {
								removeEmptyElement(tmp);
							}
							if (root.content().size() == 0
									&& root.attributes().size() == 0
									&& root.declaredNamespaces().size() == 0) {
								if (root.getParent() != null) {
									root.getParent().remove(root);
								}
							}
						}
					}
				}
				NestXMLTool_tWriteJSONField_2_Out nestXMLTool_tWriteJSONField_2_Out = new NestXMLTool_tWriteJSONField_2_Out();

				row5Struct rowStructOutput_tWriteJSONField_2_Out = null;
				// sort group root element for judgement of group
				java.util.List<org.dom4j.Element> groupElementList_tWriteJSONField_2_Out = new java.util.ArrayList<org.dom4j.Element>();
				org.dom4j.Element root4Group_tWriteJSONField_2_Out = null;
				org.dom4j.Document doc_tWriteJSONField_2_Out = org.dom4j.DocumentHelper
						.createDocument();
				org.dom4j.io.OutputFormat format_tWriteJSONField_2_Out = org.dom4j.io.OutputFormat
						.createCompactFormat();
				format_tWriteJSONField_2_Out.setNewLineAfterDeclaration(false);
				format_tWriteJSONField_2_Out.setTrimText(false);
				format_tWriteJSONField_2_Out.setEncoding("ISO-8859-15");
				int[] orders_tWriteJSONField_2_Out = new int[1];

				/**
				 * [tWriteJSONField_2_Out begin ] stop
				 */

				/**
				 * [tFileInputXML_1 begin ] start
				 */

				ok_Hash.put("tFileInputXML_1", false);
				start_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				currentComponent = "tFileInputXML_1";

				int tos_count_tFileInputXML_1 = 0;

				int nb_line_tFileInputXML_1 = 0;

				String os_tFileInputXML_1 = System.getProperty("os.name")
						.toLowerCase();
				boolean isWindows_tFileInputXML_1 = false;
				if (os_tFileInputXML_1.indexOf("windows") > -1
						|| os_tFileInputXML_1.indexOf("nt") > -1) {
					isWindows_tFileInputXML_1 = true;
				}
				class NameSpaceTool_tFileInputXML_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					private final org.talend.xpath.XPathUtil util = new org.talend.xpath.XPathUtil();

					{
						util.setDefaultNSPath(defualtNSPath);
					}

					public String addDefaultNSPrefix(String path) {
						return util.addDefaultNSPrefix(path);
					}

					public String addDefaultNSPrefix(String relativeXpression,
							String basePath) {
						return util.addDefaultNSPrefix(relativeXpression,
								basePath);
					}

				}

				class XML_API_tFileInputXML_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}
				}

				org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
				Object filename_tFileInputXML_1 = null;
				try {
					filename_tFileInputXML_1 = "C:/ETL_FASTWEB/ZUORA/data/responses/ots/login.xml";
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());

				}
				if (filename_tFileInputXML_1 != null
						&& filename_tFileInputXML_1 instanceof String
						&& filename_tFileInputXML_1.toString().startsWith("//")) {
					if (!isWindows_tFileInputXML_1) {
						filename_tFileInputXML_1 = filename_tFileInputXML_1
								.toString().replaceFirst("//", "/");
					}
				}

				boolean isValidFile_tFileInputXML_1 = true;
				org.dom4j.Document doc_tFileInputXML_1 = null;
				java.io.Closeable toClose_tFileInputXML_1 = null;
				try {
					if (filename_tFileInputXML_1 instanceof java.io.InputStream) {
						java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream) filename_tFileInputXML_1;
						toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(inputStream_tFileInputXML_1);
					} else {
						java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(
								new java.io.FileInputStream(String
										.valueOf(filename_tFileInputXML_1)),
								"ISO-8859-15");
						toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
						org.xml.sax.InputSource in_tFileInputXML_1 = new org.xml.sax.InputSource(
								unicodeReader_tFileInputXML_1);
						doc_tFileInputXML_1 = reader_tFileInputXML_1
								.read(in_tFileInputXML_1);
					}
				} catch (java.lang.Exception e) {

					System.err.println(e.getMessage());
					isValidFile_tFileInputXML_1 = false;
				} finally {
					if (toClose_tFileInputXML_1 != null) {
						toClose_tFileInputXML_1.close();
					}
				}
				if (isValidFile_tFileInputXML_1) {
					NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
					nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1
							.getRootElement());
					java.util.HashMap<String, String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;

					org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1
							.createXPath(nsTool_tFileInputXML_1
									.addDefaultNSPrefix("/soapenv:Envelope/soapenv:Body/soapenv:Fault"));
					x_tFileInputXML_1
							.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);

					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tFileInputXML_1
							.selectNodes(doc_tFileInputXML_1);
					XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
					String str_tFileInputXML_1 = "";
					org.dom4j.Node node_tFileInputXML_1 = null;

					// init all mapping xpaths
					for (org.dom4j.tree.AbstractNode temp_tFileInputXML_1 : nodeList_tFileInputXML_1) {
						nb_line_tFileInputXML_1++;
						row5 = null;
						boolean whetherReject_tFileInputXML_1 = false;
						row5 = new row5Struct();
						try {
							org.dom4j.XPath xTmp0_tFileInputXML_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_1
											.addDefaultNSPrefix("faultcode",
													"/soapenv:Envelope/soapenv:Body/soapenv:Fault"));
							xTmp0_tFileInputXML_1
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
							Object obj0_tFileInputXML_1 = xTmp0_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj0_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj0_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj0_tFileInputXML_1 instanceof String
									|| obj0_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj0_tFileInputXML_1);
							} else if (obj0_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj0_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isDefNull(node_tFileInputXML_1)) {
								row5.faultcode = null;
							} else if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								row5.faultcode = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								row5.faultcode = null;
							} else {
								row5.faultcode = str_tFileInputXML_1;
							}
							org.dom4j.XPath xTmp1_tFileInputXML_1 = org.dom4j.DocumentHelper
									.createXPath(nsTool_tFileInputXML_1
											.addDefaultNSPrefix("faultstring",
													"/soapenv:Envelope/soapenv:Body/soapenv:Fault"));
							xTmp1_tFileInputXML_1
									.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1);
							Object obj1_tFileInputXML_1 = xTmp1_tFileInputXML_1
									.evaluate(temp_tFileInputXML_1);
							if (obj1_tFileInputXML_1 == null) {
								node_tFileInputXML_1 = null;
								str_tFileInputXML_1 = "";

							} else if (obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
								node_tFileInputXML_1 = (org.dom4j.Node) obj1_tFileInputXML_1;
								str_tFileInputXML_1 = org.jaxen.function.StringFunction
										.evaluate(
												node_tFileInputXML_1,
												org.jaxen.dom4j.DocumentNavigator
														.getInstance());
							} else if (obj1_tFileInputXML_1 instanceof String
									|| obj1_tFileInputXML_1 instanceof Number) {
								node_tFileInputXML_1 = temp_tFileInputXML_1;
								str_tFileInputXML_1 = String
										.valueOf(obj1_tFileInputXML_1);
							} else if (obj1_tFileInputXML_1 instanceof java.util.List) {
								java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>) obj1_tFileInputXML_1;
								node_tFileInputXML_1 = nodes_tFileInputXML_1
										.size() > 0 ? nodes_tFileInputXML_1
										.get(0) : null;
								str_tFileInputXML_1 = node_tFileInputXML_1 == null ? ""
										: org.jaxen.function.StringFunction
												.evaluate(
														node_tFileInputXML_1,
														org.jaxen.dom4j.DocumentNavigator
																.getInstance());
							}
							if (xml_api_tFileInputXML_1
									.isDefNull(node_tFileInputXML_1)) {
								row5.faultstring = null;
							} else if (xml_api_tFileInputXML_1
									.isEmpty(node_tFileInputXML_1)) {
								row5.faultstring = "";
							} else if (xml_api_tFileInputXML_1
									.isMissing(node_tFileInputXML_1)) {
								row5.faultstring = null;
							} else {
								row5.faultstring = str_tFileInputXML_1;
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputXML_1 = true;
							System.err.println(e.getMessage());
							row5 = null;
						}

						if (nb_line_tFileInputXML_1 > 50) {

							break;
						}

						/**
						 * [tFileInputXML_1 begin ] stop
						 */

						/**
						 * [tFileInputXML_1 main ] start
						 */

						currentComponent = "tFileInputXML_1";

						tos_count_tFileInputXML_1++;

						/**
						 * [tFileInputXML_1 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tWriteJSONField_2_Out main ] start
							 */

							currentVirtualComponent = "tWriteJSONField_2";

							currentComponent = "tWriteJSONField_2_Out";

							if (txf_tWriteJSONField_2_Out.getLastException() != null) {
								currentComponent = txf_tWriteJSONField_2_Out
										.getCurrentComponent();
								throw txf_tWriteJSONField_2_Out
										.getLastException();
							}
							nb_line_tWriteJSONField_2_Out++;
							valueMap_tWriteJSONField_2_Out.clear();
							valueMap_tWriteJSONField_2_Out.put(
									"faultcode",
									(row5.faultcode != null ? row5.faultcode
											.toString() : null));
							valueMap_tWriteJSONField_2_Out
									.put("faultstring",
											(row5.faultstring != null ? row5.faultstring
													.toString() : null));
							String strTemp_tWriteJSONField_2_Out = "";
							strTemp_tWriteJSONField_2_Out = strTemp_tWriteJSONField_2_Out
									+ valueMap_tWriteJSONField_2_Out
											.get("faultcode")
									+ valueMap_tWriteJSONField_2_Out.get(
											"faultcode").length();
							strTemp_tWriteJSONField_2_Out = strTemp_tWriteJSONField_2_Out
									+ valueMap_tWriteJSONField_2_Out
											.get("faultstring")
									+ valueMap_tWriteJSONField_2_Out.get(
											"faultstring").length();
							if (strCompCache_tWriteJSONField_2_Out == null) {
								strCompCache_tWriteJSONField_2_Out = strTemp_tWriteJSONField_2_Out;

								rowStructOutput_tWriteJSONField_2_Out = row5;

							} else {
								// the data read is different from the data read
								// last time.
								if (strCompCache_tWriteJSONField_2_Out
										.equals(strTemp_tWriteJSONField_2_Out) == false) {
									nestXMLTool_tWriteJSONField_2_Out
											.replaceDefaultNameSpace(doc_tWriteJSONField_2_Out
													.getRootElement());
									java.io.StringWriter strWriter_tWriteJSONField_2_Out = new java.io.StringWriter();
									org.dom4j.io.XMLWriter output_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(
											strWriter_tWriteJSONField_2_Out,
											format_tWriteJSONField_2_Out);
									output_tWriteJSONField_2_Out
											.write(doc_tWriteJSONField_2_Out);
									output_tWriteJSONField_2_Out.close();

									row3Struct row_tWriteJSONField_2_Out = new row3Struct();

									row_tWriteJSONField_2_Out.result = strWriter_tWriteJSONField_2_Out
											.toString();
									listGroupby_tWriteJSONField_2_Out
											.add(row_tWriteJSONField_2_Out);

									doc_tWriteJSONField_2_Out.clearContent();
									needRoot_tWriteJSONField_2_Out = true;
									for (int i_tWriteJSONField_2_Out = 0; i_tWriteJSONField_2_Out < orders_tWriteJSONField_2_Out.length; i_tWriteJSONField_2_Out++) {
										orders_tWriteJSONField_2_Out[i_tWriteJSONField_2_Out] = 0;
									}

									if (groupbyList_tWriteJSONField_2_Out != null
											&& groupbyList_tWriteJSONField_2_Out
													.size() >= 0) {
										groupbyList_tWriteJSONField_2_Out
												.clear();
									}
									strCompCache_tWriteJSONField_2_Out = strTemp_tWriteJSONField_2_Out;
									rowStructOutput_tWriteJSONField_2_Out = row5;

								}
							}

							org.dom4j.Element subTreeRootParent_tWriteJSONField_2_Out = null;

							// build root xml tree
							if (needRoot_tWriteJSONField_2_Out) {
								needRoot_tWriteJSONField_2_Out = false;
								org.dom4j.Element root_tWriteJSONField_2_Out = doc_tWriteJSONField_2_Out
										.addElement("result");
								subTreeRootParent_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out;
								org.dom4j.Element root_0_tWriteJSONField_2_Out = root_tWriteJSONField_2_Out
										.addElement("faultstring");
								if (valueMap_tWriteJSONField_2_Out
										.get("faultstring") != null) {
									nestXMLTool_tWriteJSONField_2_Out.setText(
											root_0_tWriteJSONField_2_Out,
											valueMap_tWriteJSONField_2_Out
													.get("faultstring"));
								}
								root4Group_tWriteJSONField_2_Out = subTreeRootParent_tWriteJSONField_2_Out;
							} else {
								subTreeRootParent_tWriteJSONField_2_Out = root4Group_tWriteJSONField_2_Out;
							}
							// build group xml tree
							// build loop xml tree
							org.dom4j.Element loop_tWriteJSONField_2_Out = org.dom4j.DocumentHelper
									.createElement("faultcode");
							if (orders_tWriteJSONField_2_Out[0] == 0) {
								orders_tWriteJSONField_2_Out[0] = 0;
							}
							if (1 < orders_tWriteJSONField_2_Out.length) {
								orders_tWriteJSONField_2_Out[1] = 0;
							}
							subTreeRootParent_tWriteJSONField_2_Out.elements()
									.add(orders_tWriteJSONField_2_Out[0]++,
											loop_tWriteJSONField_2_Out);
							if (valueMap_tWriteJSONField_2_Out.get("faultcode") != null) {
								nestXMLTool_tWriteJSONField_2_Out.setText(
										loop_tWriteJSONField_2_Out,
										valueMap_tWriteJSONField_2_Out
												.get("faultcode"));
							}

							tos_count_tWriteJSONField_2_Out++;

							/**
							 * [tWriteJSONField_2_Out main ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputXML_1 end ] start
						 */

						currentComponent = "tFileInputXML_1";

					}
				}
				globalMap.put("tFileInputXML_1_NB_LINE",
						nb_line_tFileInputXML_1);

				ok_Hash.put("tFileInputXML_1", true);
				end_Hash.put("tFileInputXML_1", System.currentTimeMillis());

				/**
				 * [tFileInputXML_1 end ] stop
				 */

				/**
				 * [tWriteJSONField_2_Out end ] start
				 */

				currentVirtualComponent = "tWriteJSONField_2";

				currentComponent = "tWriteJSONField_2_Out";

				if (nb_line_tWriteJSONField_2_Out > 0) {
					nestXMLTool_tWriteJSONField_2_Out
							.replaceDefaultNameSpace(doc_tWriteJSONField_2_Out
									.getRootElement());
					java.io.StringWriter strWriter_tWriteJSONField_2_Out = new java.io.StringWriter();
					org.dom4j.io.XMLWriter output_tWriteJSONField_2_Out = new org.dom4j.io.XMLWriter(
							strWriter_tWriteJSONField_2_Out,
							format_tWriteJSONField_2_Out);
					output_tWriteJSONField_2_Out
							.write(doc_tWriteJSONField_2_Out);
					output_tWriteJSONField_2_Out.close();
					row3Struct row_tWriteJSONField_2_Out = new row3Struct();

					row_tWriteJSONField_2_Out.result = strWriter_tWriteJSONField_2_Out
							.toString();
					listGroupby_tWriteJSONField_2_Out
							.add(row_tWriteJSONField_2_Out);

				}
				globalMap.put("tWriteJSONField_2_Out_NB_LINE",
						nb_line_tWriteJSONField_2_Out);
				globalMap
						.put("tWriteJSONField_2_In_FINISH"
								+ (listGroupby_tWriteJSONField_2_Out == null ? ""
										: listGroupby_tWriteJSONField_2_Out
												.hashCode()), "true");

				txf_tWriteJSONField_2_Out.join();
				if (txf_tWriteJSONField_2_Out.getLastException() != null) {
					currentComponent = txf_tWriteJSONField_2_Out
							.getCurrentComponent();
					throw txf_tWriteJSONField_2_Out.getLastException();
				}

				resourceMap.put("finish_tWriteJSONField_2_Out", true);

				ok_Hash.put("tWriteJSONField_2_Out", true);
				end_Hash.put("tWriteJSONField_2_Out",
						System.currentTimeMillis());

				/**
				 * [tWriteJSONField_2_Out end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputXML_1 finally ] start
				 */

				currentComponent = "tFileInputXML_1";

				/**
				 * [tFileInputXML_1 finally ] stop
				 */

				/**
				 * [tWriteJSONField_2_Out finally ] start
				 */

				currentVirtualComponent = "tWriteJSONField_2";

				currentComponent = "tWriteJSONField_2_Out";

				java.util.Queue listGroupby_tWriteJSONField_2_Out = (java.util.Queue) globalMap
						.get("queue_tWriteJSONField_2_In");
				if (resourceMap.get("finish_tWriteJSONField_2_Out") == null) {
					globalMap
							.put("tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"
									+ (listGroupby_tWriteJSONField_2_Out == null ? ""
											: listGroupby_tWriteJSONField_2_Out
													.hashCode()), "true");
				}

				if (listGroupby_tWriteJSONField_2_Out != null) {
					globalMap
							.put("tWriteJSONField_2_In_FINISH"
									+ (listGroupby_tWriteJSONField_2_Out == null ? ""
											: listGroupby_tWriteJSONField_2_Out
													.hashCode()), "true");
				}

				/**
				 * [tWriteJSONField_2_Out finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}

	public static class stage_KOStruct implements
			routines.system.IPersistableRow<stage_KOStruct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_Login = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_Login = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public Object stage;

		public Object getStage() {
			return this.stage;
		}

		public Object result;

		public Object getResult() {
			return this.result;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		public String server_url;

		public String getServer_url() {
			return this.server_url;
		}

		public String session;

		public String getSession() {
			return this.session;
		}

		public java.util.Date timestamp;

		public java.util.Date getTimestamp() {
			return this.timestamp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final stage_KOStruct other = (stage_KOStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(stage_KOStruct other) {

			other.id = this.id;
			other.stage = this.stage;
			other.result = this.result;
			other.error = this.error;
			other.server_url = this.server_url;
			other.session = this.session;
			other.timestamp = this.timestamp;

		}

		public void copyKeysDataTo(stage_KOStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_Login.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_Login.length == 0) {
						commonByteArray_ZUORA_OTS_Login = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_Login = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_Login, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_Login, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_Login) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.stage = (Object) dis.readObject();

					this.result = (Object) dis.readObject();

					this.error = readString(dis);

					this.server_url = readString(dis);

					this.session = readString(dis);

					this.timestamp = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// Object

				dos.writeObject(this.stage);

				// Object

				dos.writeObject(this.result);

				// String

				writeString(this.error, dos);

				// String

				writeString(this.server_url, dos);

				// String

				writeString(this.session, dos);

				// java.util.Date

				writeDate(this.timestamp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",stage=" + String.valueOf(stage));
			sb.append(",result=" + String.valueOf(result));
			sb.append(",error=" + error);
			sb.append(",server_url=" + server_url);
			sb.append(",session=" + session);
			sb.append(",timestamp=" + String.valueOf(timestamp));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(stage_KOStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_Login = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_Login = new byte[0];

		public String result;

		public String getResult() {
			return this.result;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_Login.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_Login.length == 0) {
						commonByteArray_ZUORA_OTS_Login = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_Login = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_Login, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_Login, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_Login) {

				try {

					int length = 0;

					this.result = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.result, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("result=" + result);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tWriteJSONField_2_InProcess(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWriteJSONField_2_In_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				stage_KOStruct stage_KO = new stage_KOStruct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "ots_job_state";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null
						|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "fw_zuora" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "fw_zuora" + "?"
							+ properties_tMysqlOutput_1;
				}
				String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_1 = "root";

				final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
				java.lang.Class.forName(driverClass_tMysqlOutput_1);

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				String insert_tMysqlOutput_1 = "INSERT INTO `"
						+ "ots_job_state"
						+ "` (`id`,`stage`,`result`,`error`,`server_url`,`session`,`timestamp`) VALUES (?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_1 = 100;
				int batchSizeCounter_tMysqlOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insert_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				stage_KOStruct stage_KO_tmp = new stage_KOStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tWriteJSONField_2_In begin ] start
				 */

				ok_Hash.put("tWriteJSONField_2_In", false);
				start_Hash.put("tWriteJSONField_2_In",
						System.currentTimeMillis());

				currentVirtualComponent = "tWriteJSONField_2";

				currentComponent = "tWriteJSONField_2_In";

				int tos_count_tWriteJSONField_2_In = 0;

				int nb_line_tWriteJSONField_2_In = 0;
				net.sf.json.xml.XMLSerializer xmlSerializer_tWriteJSONField_2_In = new net.sf.json.xml.XMLSerializer();
				xmlSerializer_tWriteJSONField_2_In.clearNamespaces();
				xmlSerializer_tWriteJSONField_2_In.setSkipNamespaces(true);
				xmlSerializer_tWriteJSONField_2_In.setForceTopLevelObject(true);

				java.util.Queue<row3Struct> queue_tWriteJSONField_2_In = (java.util.Queue<row3Struct>) globalMap
						.get("queue_tWriteJSONField_2_In");

				String readFinishMarkWithPipeId_tWriteJSONField_2_In = "tWriteJSONField_2_In_FINISH"
						+ (queue_tWriteJSONField_2_In == null ? ""
								: queue_tWriteJSONField_2_In.hashCode());
				String str_tWriteJSONField_2_In = null;

				while (!globalMap
						.containsKey(readFinishMarkWithPipeId_tWriteJSONField_2_In)
						|| !queue_tWriteJSONField_2_In.isEmpty()) {
					if (!queue_tWriteJSONField_2_In.isEmpty()) {

						/**
						 * [tWriteJSONField_2_In begin ] stop
						 */

						/**
						 * [tWriteJSONField_2_In main ] start
						 */

						currentVirtualComponent = "tWriteJSONField_2";

						currentComponent = "tWriteJSONField_2_In";

						row3Struct result_tWriteJSONField_2_In = queue_tWriteJSONField_2_In
								.poll();
						str_tWriteJSONField_2_In = result_tWriteJSONField_2_In.result;
						row3.result = result_tWriteJSONField_2_In.result;
						row3.result = result_tWriteJSONField_2_In.result;
						// Convert XML to JSON
						net.sf.json.JSON json_tWriteJSONField_2_In = xmlSerializer_tWriteJSONField_2_In
								.read(str_tWriteJSONField_2_In);
						row3.result = json_tWriteJSONField_2_In.toString();

						nb_line_tWriteJSONField_2_In++;

						tos_count_tWriteJSONField_2_In++;

						/**
						 * [tWriteJSONField_2_In main ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							stage_KO = null;

							// # Output table : 'stage_KO'
							stage_KO_tmp.id = 0;
							stage_KO_tmp.stage = (String) globalMap
									.get("stage");
							stage_KO_tmp.result = "KO";
							stage_KO_tmp.error = row3.result;
							stage_KO_tmp.server_url = null;
							stage_KO_tmp.session = null;
							stage_KO_tmp.timestamp = TalendDate
									.getCurrentDate();
							stage_KO = stage_KO_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */
						// Start of branch "stage_KO"
						if (stage_KO != null) {

							/**
							 * [tMysqlOutput_1 main ] start
							 */

							currentComponent = "tMysqlOutput_1";

							whetherReject_tMysqlOutput_1 = false;
							pstmt_tMysqlOutput_1.setLong(1, stage_KO.id);

							if (stage_KO.stage == null) {
								pstmt_tMysqlOutput_1.setNull(2,
										java.sql.Types.OTHER);
							} else {
								pstmt_tMysqlOutput_1.setObject(2,
										stage_KO.stage);
							}

							if (stage_KO.result == null) {
								pstmt_tMysqlOutput_1.setNull(3,
										java.sql.Types.OTHER);
							} else {
								pstmt_tMysqlOutput_1.setObject(3,
										stage_KO.result);
							}

							if (stage_KO.error == null) {
								pstmt_tMysqlOutput_1.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(4,
										stage_KO.error);
							}

							if (stage_KO.server_url == null) {
								pstmt_tMysqlOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(5,
										stage_KO.server_url);
							}

							if (stage_KO.session == null) {
								pstmt_tMysqlOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tMysqlOutput_1.setString(6,
										stage_KO.session);
							}

							if (stage_KO.timestamp != null) {
								date_tMysqlOutput_1 = stage_KO.timestamp
										.getTime();
								if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
										|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
									pstmt_tMysqlOutput_1.setString(7,
											"0000-00-00 00:00:00");
								} else {
									pstmt_tMysqlOutput_1.setTimestamp(7,
											new java.sql.Timestamp(
													date_tMysqlOutput_1));
								}
							} else {
								pstmt_tMysqlOutput_1.setNull(7,
										java.sql.Types.DATE);
							}

							pstmt_tMysqlOutput_1.addBatch();
							nb_line_tMysqlOutput_1++;

							batchSizeCounter_tMysqlOutput_1++;
							if (batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
								try {
									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
											.executeBatch()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: 1);
									}
									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}
									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tMysqlOutput_1 = 0;
							}
							commitCounter_tMysqlOutput_1++;

							if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

								try {
									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
											.executeBatch()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: 1);
									}
									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tMysqlOutput_1 = 0;
									for (int countEach_tMysqlOutput_1 : e
											.getUpdateCounts()) {
										countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
												: countEach_tMysqlOutput_1);
									}
									insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
									System.err.println(e.getMessage());

								}
								conn_tMysqlOutput_1.commit();
								commitCounter_tMysqlOutput_1 = 0;

							}

							tos_count_tMysqlOutput_1++;

							/**
							 * [tMysqlOutput_1 main ] stop
							 */

						} // End of branch "stage_KO"

						/**
						 * [tWriteJSONField_2_In end ] start
						 */

						currentVirtualComponent = "tWriteJSONField_2";

						currentComponent = "tWriteJSONField_2_In";

					}
				}

				String readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In = "tWriteJSONField_2_In_FINISH_WITH_EXCEPTION"
						+ (queue_tWriteJSONField_2_In == null ? ""
								: queue_tWriteJSONField_2_In.hashCode());
				if (globalMap
						.containsKey(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In)) {
					if (!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
						globalMap
								.put(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In,
										null);// syn
					}
					globalMap
							.remove(readFinishWithExceptionMarkWithPipeId_tWriteJSONField_2_In);
					return;
				}
				globalMap.remove("queue_tWriteJSONField_2_In");

				if (!(globalMap instanceof java.util.concurrent.ConcurrentHashMap)) {
					globalMap
							.put(readFinishMarkWithPipeId_tWriteJSONField_2_In,
									null);// syn
				}
				globalMap.remove(readFinishMarkWithPipeId_tWriteJSONField_2_In);

				globalMap.put("tWriteJSONField_2_NB_LINE",
						nb_line_tWriteJSONField_2_In);

				ok_Hash.put("tWriteJSONField_2_In", true);
				end_Hash.put("tWriteJSONField_2_In", System.currentTimeMillis());

				/**
				 * [tWriteJSONField_2_In end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				try {
					if (batchSizeCounter_tMysqlOutput_1 != 0) {
						int countSum_tMysqlOutput_1 = 0;

						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_1 = 0;
					for (int countEach_tMysqlOutput_1 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
								: countEach_tMysqlOutput_1);
					}

					insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_1 = 0;

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				if (commitCounter_tMysqlOutput_1 > 0) {

					conn_tMysqlOutput_1.commit();

				}

				conn_tMysqlOutput_1.close();

				resourceMap.put("finish_tMysqlOutput_1", true);

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWriteJSONField_2_In finally ] start
				 */

				currentVirtualComponent = "tWriteJSONField_2";

				currentComponent = "tWriteJSONField_2_In";

				/**
				 * [tWriteJSONField_2_In finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (resourceMap.get("finish_tMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
							String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :"
									+ sqlEx_tMysqlOutput_1.getMessage();

							System.err.println(errorMessage_tMysqlOutput_1);
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWriteJSONField_2_In_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final OTS_Login OTS_LoginClass = new OTS_Login();

		int exitCode = OTS_LoginClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = OTS_Login.class.getClassLoader()
					.getResourceAsStream(
							"zuora/ots_login_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tSetGlobalVar_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tSetGlobalVar_1) {
			globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", -1);

			e_tSetGlobalVar_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : OTS_Login");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 127963 characters generated by Talend Open Studio for ESB on the 6 maggio
 * 2016 14.41.49 CEST
 ************************************************************************************************/
