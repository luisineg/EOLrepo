// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package zuora.ots_readcsv_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: OTS_ReadCSV Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.1.1.20151214_1327
 * @status 
 */
public class OTS_ReadCSV implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "OTS_ReadCSV";
	private final String projectName = "ZUORA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					OTS_ReadCSV.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(OTS_ReadCSV.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tFixedFlowInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class orderStruct implements
			routines.system.IPersistableRow<orderStruct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_ReadCSV = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_ReadCSV = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public String promoID;

		public String getPromoID() {
			return this.promoID;
		}

		public String subscriber_surname;

		public String getSubscriber_surname() {
			return this.subscriber_surname;
		}

		public String subscriber_name;

		public String getSubscriber_name() {
			return this.subscriber_name;
		}

		public String subscriber_type;

		public String getSubscriber_type() {
			return this.subscriber_type;
		}

		public String orderer_surname;

		public String getOrderer_surname() {
			return this.orderer_surname;
		}

		public String orderer_name;

		public String getOrderer_name() {
			return this.orderer_name;
		}

		public String orderer_taxCode;

		public String getOrderer_taxCode() {
			return this.orderer_taxCode;
		}

		public String orderer_VATRegistrationNumber;

		public String getOrderer_VATRegistrationNumber() {
			return this.orderer_VATRegistrationNumber;
		}

		public String residenceAddress_street;

		public String getResidenceAddress_street() {
			return this.residenceAddress_street;
		}

		public String residenceAddress_zipCode;

		public String getResidenceAddress_zipCode() {
			return this.residenceAddress_zipCode;
		}

		public String residenceAddress_city;

		public String getResidenceAddress_city() {
			return this.residenceAddress_city;
		}

		public String residenceAddress_province;

		public String getResidenceAddress_province() {
			return this.residenceAddress_province;
		}

		public String residenceAddress_state;

		public String getResidenceAddress_state() {
			return this.residenceAddress_state;
		}

		public String shippingAddress_surname;

		public String getShippingAddress_surname() {
			return this.shippingAddress_surname;
		}

		public String shippingAddress_name;

		public String getShippingAddress_name() {
			return this.shippingAddress_name;
		}

		public String shippingAddress_careOf;

		public String getShippingAddress_careOf() {
			return this.shippingAddress_careOf;
		}

		public String shippingAddress_street;

		public String getShippingAddress_street() {
			return this.shippingAddress_street;
		}

		public String shippingAddress_zipCode;

		public String getShippingAddress_zipCode() {
			return this.shippingAddress_zipCode;
		}

		public String shippingAddress_city;

		public String getShippingAddress_city() {
			return this.shippingAddress_city;
		}

		public String shippingAddress_province;

		public String getShippingAddress_province() {
			return this.shippingAddress_province;
		}

		public String shippingAddress_state;

		public String getShippingAddress_state() {
			return this.shippingAddress_state;
		}

		public String orderer_email;

		public String getOrderer_email() {
			return this.orderer_email;
		}

		public String orderer_mobilePhone;

		public String getOrderer_mobilePhone() {
			return this.orderer_mobilePhone;
		}

		public String product_code;

		public String getProduct_code() {
			return this.product_code;
		}

		public String product_description;

		public String getProduct_description() {
			return this.product_description;
		}

		public String product_itemsNumber;

		public String getProduct_itemsNumber() {
			return this.product_itemsNumber;
		}

		public String product_price;

		public String getProduct_price() {
			return this.product_price;
		}

		public String VATRate;

		public String getVATRate() {
			return this.VATRate;
		}

		public String registrationDate;

		public String getRegistrationDate() {
			return this.registrationDate;
		}

		public String paymentMethod;

		public String getPaymentMethod() {
			return this.paymentMethod;
		}

		public String paymentDate;

		public String getPaymentDate() {
			return this.paymentDate;
		}

		public String creditTransferIBAN;

		public String getCreditTransferIBAN() {
			return this.creditTransferIBAN;
		}

		public String transactionReference;

		public String getTransactionReference() {
			return this.transactionReference;
		}

		public String branch_phone;

		public String getBranch_phone() {
			return this.branch_phone;
		}

		public String branch_email;

		public String getBranch_email() {
			return this.branch_email;
		}

		public String shippingMobilePhone;

		public String getShippingMobilePhone() {
			return this.shippingMobilePhone;
		}

		public int totalItems;

		public int getTotalItems() {
			return this.totalItems;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final orderStruct other = (orderStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(orderStruct other) {

			other.id = this.id;
			other.promoID = this.promoID;
			other.subscriber_surname = this.subscriber_surname;
			other.subscriber_name = this.subscriber_name;
			other.subscriber_type = this.subscriber_type;
			other.orderer_surname = this.orderer_surname;
			other.orderer_name = this.orderer_name;
			other.orderer_taxCode = this.orderer_taxCode;
			other.orderer_VATRegistrationNumber = this.orderer_VATRegistrationNumber;
			other.residenceAddress_street = this.residenceAddress_street;
			other.residenceAddress_zipCode = this.residenceAddress_zipCode;
			other.residenceAddress_city = this.residenceAddress_city;
			other.residenceAddress_province = this.residenceAddress_province;
			other.residenceAddress_state = this.residenceAddress_state;
			other.shippingAddress_surname = this.shippingAddress_surname;
			other.shippingAddress_name = this.shippingAddress_name;
			other.shippingAddress_careOf = this.shippingAddress_careOf;
			other.shippingAddress_street = this.shippingAddress_street;
			other.shippingAddress_zipCode = this.shippingAddress_zipCode;
			other.shippingAddress_city = this.shippingAddress_city;
			other.shippingAddress_province = this.shippingAddress_province;
			other.shippingAddress_state = this.shippingAddress_state;
			other.orderer_email = this.orderer_email;
			other.orderer_mobilePhone = this.orderer_mobilePhone;
			other.product_code = this.product_code;
			other.product_description = this.product_description;
			other.product_itemsNumber = this.product_itemsNumber;
			other.product_price = this.product_price;
			other.VATRate = this.VATRate;
			other.registrationDate = this.registrationDate;
			other.paymentMethod = this.paymentMethod;
			other.paymentDate = this.paymentDate;
			other.creditTransferIBAN = this.creditTransferIBAN;
			other.transactionReference = this.transactionReference;
			other.branch_phone = this.branch_phone;
			other.branch_email = this.branch_email;
			other.shippingMobilePhone = this.shippingMobilePhone;
			other.totalItems = this.totalItems;

		}

		public void copyKeysDataTo(orderStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_ReadCSV.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_ReadCSV.length == 0) {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_ReadCSV, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_ReadCSV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_ReadCSV) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.promoID = readString(dis);

					this.subscriber_surname = readString(dis);

					this.subscriber_name = readString(dis);

					this.subscriber_type = readString(dis);

					this.orderer_surname = readString(dis);

					this.orderer_name = readString(dis);

					this.orderer_taxCode = readString(dis);

					this.orderer_VATRegistrationNumber = readString(dis);

					this.residenceAddress_street = readString(dis);

					this.residenceAddress_zipCode = readString(dis);

					this.residenceAddress_city = readString(dis);

					this.residenceAddress_province = readString(dis);

					this.residenceAddress_state = readString(dis);

					this.shippingAddress_surname = readString(dis);

					this.shippingAddress_name = readString(dis);

					this.shippingAddress_careOf = readString(dis);

					this.shippingAddress_street = readString(dis);

					this.shippingAddress_zipCode = readString(dis);

					this.shippingAddress_city = readString(dis);

					this.shippingAddress_province = readString(dis);

					this.shippingAddress_state = readString(dis);

					this.orderer_email = readString(dis);

					this.orderer_mobilePhone = readString(dis);

					this.product_code = readString(dis);

					this.product_description = readString(dis);

					this.product_itemsNumber = readString(dis);

					this.product_price = readString(dis);

					this.VATRate = readString(dis);

					this.registrationDate = readString(dis);

					this.paymentMethod = readString(dis);

					this.paymentDate = readString(dis);

					this.creditTransferIBAN = readString(dis);

					this.transactionReference = readString(dis);

					this.branch_phone = readString(dis);

					this.branch_email = readString(dis);

					this.shippingMobilePhone = readString(dis);

					this.totalItems = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// String

				writeString(this.promoID, dos);

				// String

				writeString(this.subscriber_surname, dos);

				// String

				writeString(this.subscriber_name, dos);

				// String

				writeString(this.subscriber_type, dos);

				// String

				writeString(this.orderer_surname, dos);

				// String

				writeString(this.orderer_name, dos);

				// String

				writeString(this.orderer_taxCode, dos);

				// String

				writeString(this.orderer_VATRegistrationNumber, dos);

				// String

				writeString(this.residenceAddress_street, dos);

				// String

				writeString(this.residenceAddress_zipCode, dos);

				// String

				writeString(this.residenceAddress_city, dos);

				// String

				writeString(this.residenceAddress_province, dos);

				// String

				writeString(this.residenceAddress_state, dos);

				// String

				writeString(this.shippingAddress_surname, dos);

				// String

				writeString(this.shippingAddress_name, dos);

				// String

				writeString(this.shippingAddress_careOf, dos);

				// String

				writeString(this.shippingAddress_street, dos);

				// String

				writeString(this.shippingAddress_zipCode, dos);

				// String

				writeString(this.shippingAddress_city, dos);

				// String

				writeString(this.shippingAddress_province, dos);

				// String

				writeString(this.shippingAddress_state, dos);

				// String

				writeString(this.orderer_email, dos);

				// String

				writeString(this.orderer_mobilePhone, dos);

				// String

				writeString(this.product_code, dos);

				// String

				writeString(this.product_description, dos);

				// String

				writeString(this.product_itemsNumber, dos);

				// String

				writeString(this.product_price, dos);

				// String

				writeString(this.VATRate, dos);

				// String

				writeString(this.registrationDate, dos);

				// String

				writeString(this.paymentMethod, dos);

				// String

				writeString(this.paymentDate, dos);

				// String

				writeString(this.creditTransferIBAN, dos);

				// String

				writeString(this.transactionReference, dos);

				// String

				writeString(this.branch_phone, dos);

				// String

				writeString(this.branch_email, dos);

				// String

				writeString(this.shippingMobilePhone, dos);

				// int

				dos.writeInt(this.totalItems);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",promoID=" + promoID);
			sb.append(",subscriber_surname=" + subscriber_surname);
			sb.append(",subscriber_name=" + subscriber_name);
			sb.append(",subscriber_type=" + subscriber_type);
			sb.append(",orderer_surname=" + orderer_surname);
			sb.append(",orderer_name=" + orderer_name);
			sb.append(",orderer_taxCode=" + orderer_taxCode);
			sb.append(",orderer_VATRegistrationNumber="
					+ orderer_VATRegistrationNumber);
			sb.append(",residenceAddress_street=" + residenceAddress_street);
			sb.append(",residenceAddress_zipCode=" + residenceAddress_zipCode);
			sb.append(",residenceAddress_city=" + residenceAddress_city);
			sb.append(",residenceAddress_province=" + residenceAddress_province);
			sb.append(",residenceAddress_state=" + residenceAddress_state);
			sb.append(",shippingAddress_surname=" + shippingAddress_surname);
			sb.append(",shippingAddress_name=" + shippingAddress_name);
			sb.append(",shippingAddress_careOf=" + shippingAddress_careOf);
			sb.append(",shippingAddress_street=" + shippingAddress_street);
			sb.append(",shippingAddress_zipCode=" + shippingAddress_zipCode);
			sb.append(",shippingAddress_city=" + shippingAddress_city);
			sb.append(",shippingAddress_province=" + shippingAddress_province);
			sb.append(",shippingAddress_state=" + shippingAddress_state);
			sb.append(",orderer_email=" + orderer_email);
			sb.append(",orderer_mobilePhone=" + orderer_mobilePhone);
			sb.append(",product_code=" + product_code);
			sb.append(",product_description=" + product_description);
			sb.append(",product_itemsNumber=" + product_itemsNumber);
			sb.append(",product_price=" + product_price);
			sb.append(",VATRate=" + VATRate);
			sb.append(",registrationDate=" + registrationDate);
			sb.append(",paymentMethod=" + paymentMethod);
			sb.append(",paymentDate=" + paymentDate);
			sb.append(",creditTransferIBAN=" + creditTransferIBAN);
			sb.append(",transactionReference=" + transactionReference);
			sb.append(",branch_phone=" + branch_phone);
			sb.append(",branch_email=" + branch_email);
			sb.append(",shippingMobilePhone=" + shippingMobilePhone);
			sb.append(",totalItems=" + String.valueOf(totalItems));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(orderStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class rejectedStruct implements
			routines.system.IPersistableRow<rejectedStruct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_ReadCSV = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_ReadCSV = new byte[0];

		public String promoID;

		public String getPromoID() {
			return this.promoID;
		}

		public String orderer_surname;

		public String getOrderer_surname() {
			return this.orderer_surname;
		}

		public String orderer_taxCode;

		public String getOrderer_taxCode() {
			return this.orderer_taxCode;
		}

		public String orderer_VATRegistrationNumber;

		public String getOrderer_VATRegistrationNumber() {
			return this.orderer_VATRegistrationNumber;
		}

		public String residenceAddress_street;

		public String getResidenceAddress_street() {
			return this.residenceAddress_street;
		}

		public String residenceAddress_zipCode;

		public String getResidenceAddress_zipCode() {
			return this.residenceAddress_zipCode;
		}

		public String residenceAddress_city;

		public String getResidenceAddress_city() {
			return this.residenceAddress_city;
		}

		public String residenceAddress_province;

		public String getResidenceAddress_province() {
			return this.residenceAddress_province;
		}

		public String orderer_email;

		public String getOrderer_email() {
			return this.orderer_email;
		}

		public Integer totalItems;

		public Integer getTotalItems() {
			return this.totalItems;
		}

		public String registrationDate;

		public String getRegistrationDate() {
			return this.registrationDate;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_ReadCSV.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_ReadCSV.length == 0) {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_ReadCSV, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_ReadCSV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_ReadCSV) {

				try {

					int length = 0;

					this.promoID = readString(dis);

					this.orderer_surname = readString(dis);

					this.orderer_taxCode = readString(dis);

					this.orderer_VATRegistrationNumber = readString(dis);

					this.residenceAddress_street = readString(dis);

					this.residenceAddress_zipCode = readString(dis);

					this.residenceAddress_city = readString(dis);

					this.residenceAddress_province = readString(dis);

					this.orderer_email = readString(dis);

					this.totalItems = readInteger(dis);

					this.registrationDate = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.promoID, dos);

				// String

				writeString(this.orderer_surname, dos);

				// String

				writeString(this.orderer_taxCode, dos);

				// String

				writeString(this.orderer_VATRegistrationNumber, dos);

				// String

				writeString(this.residenceAddress_street, dos);

				// String

				writeString(this.residenceAddress_zipCode, dos);

				// String

				writeString(this.residenceAddress_city, dos);

				// String

				writeString(this.residenceAddress_province, dos);

				// String

				writeString(this.orderer_email, dos);

				// Integer

				writeInteger(this.totalItems, dos);

				// String

				writeString(this.registrationDate, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("promoID=" + promoID);
			sb.append(",orderer_surname=" + orderer_surname);
			sb.append(",orderer_taxCode=" + orderer_taxCode);
			sb.append(",orderer_VATRegistrationNumber="
					+ orderer_VATRegistrationNumber);
			sb.append(",residenceAddress_street=" + residenceAddress_street);
			sb.append(",residenceAddress_zipCode=" + residenceAddress_zipCode);
			sb.append(",residenceAddress_city=" + residenceAddress_city);
			sb.append(",residenceAddress_province=" + residenceAddress_province);
			sb.append(",orderer_email=" + orderer_email);
			sb.append(",totalItems=" + String.valueOf(totalItems));
			sb.append(",registrationDate=" + registrationDate);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rejectedStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_ReadCSV = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_ReadCSV = new byte[0];

		public String partnerName;

		public String getPartnerName() {
			return this.partnerName;
		}

		public String promoID;

		public String getPromoID() {
			return this.promoID;
		}

		public String promoDescription;

		public String getPromoDescription() {
			return this.promoDescription;
		}

		public Character status;

		public Character getStatus() {
			return this.status;
		}

		public String subscriber_surname;

		public String getSubscriber_surname() {
			return this.subscriber_surname;
		}

		public String subscriber_name;

		public String getSubscriber_name() {
			return this.subscriber_name;
		}

		public String subscriber_type;

		public String getSubscriber_type() {
			return this.subscriber_type;
		}

		public String orderer_surname;

		public String getOrderer_surname() {
			return this.orderer_surname;
		}

		public String orderer_name;

		public String getOrderer_name() {
			return this.orderer_name;
		}

		public String orderer_taxCode;

		public String getOrderer_taxCode() {
			return this.orderer_taxCode;
		}

		public String orderer_VATRegistrationNumber;

		public String getOrderer_VATRegistrationNumber() {
			return this.orderer_VATRegistrationNumber;
		}

		public String residenceAddress_street;

		public String getResidenceAddress_street() {
			return this.residenceAddress_street;
		}

		public String residenceAddress_zipCode;

		public String getResidenceAddress_zipCode() {
			return this.residenceAddress_zipCode;
		}

		public String residenceAddress_city;

		public String getResidenceAddress_city() {
			return this.residenceAddress_city;
		}

		public String residenceAddress_province;

		public String getResidenceAddress_province() {
			return this.residenceAddress_province;
		}

		public String residenceAddress_state;

		public String getResidenceAddress_state() {
			return this.residenceAddress_state;
		}

		public String shippingAddress_surname;

		public String getShippingAddress_surname() {
			return this.shippingAddress_surname;
		}

		public String shippingAddress_name;

		public String getShippingAddress_name() {
			return this.shippingAddress_name;
		}

		public String shippingAddress_careOf;

		public String getShippingAddress_careOf() {
			return this.shippingAddress_careOf;
		}

		public String shippingAddress_street;

		public String getShippingAddress_street() {
			return this.shippingAddress_street;
		}

		public String shippingAddress_zipCode;

		public String getShippingAddress_zipCode() {
			return this.shippingAddress_zipCode;
		}

		public String shippingAddress_city;

		public String getShippingAddress_city() {
			return this.shippingAddress_city;
		}

		public String shippingAddress_province;

		public String getShippingAddress_province() {
			return this.shippingAddress_province;
		}

		public String shippingAddress_state;

		public String getShippingAddress_state() {
			return this.shippingAddress_state;
		}

		public String shippingAddtionalInfo_addressWithinZTL;

		public String getShippingAddtionalInfo_addressWithinZTL() {
			return this.shippingAddtionalInfo_addressWithinZTL;
		}

		public String shippingAddtionalInfo_addressNearCarPark;

		public String getShippingAddtionalInfo_addressNearCarPark() {
			return this.shippingAddtionalInfo_addressNearCarPark;
		}

		public String shippingAddtionalInfo_houseWithNarrowPass;

		public String getShippingAddtionalInfo_houseWithNarrowPass() {
			return this.shippingAddtionalInfo_houseWithNarrowPass;
		}

		public String shippingAddtionalInfo_specificFloorDelivery;

		public String getShippingAddtionalInfo_specificFloorDelivery() {
			return this.shippingAddtionalInfo_specificFloorDelivery;
		}

		public String shippingAddtionalInfo_preferredDeliveryDate;

		public String getShippingAddtionalInfo_preferredDeliveryDate() {
			return this.shippingAddtionalInfo_preferredDeliveryDate;
		}

		public String shippingAddtionalInfo_preferredDeliveryTime;

		public String getShippingAddtionalInfo_preferredDeliveryTime() {
			return this.shippingAddtionalInfo_preferredDeliveryTime;
		}

		public String shippingAddtionalInfo_courierNotes;

		public String getShippingAddtionalInfo_courierNotes() {
			return this.shippingAddtionalInfo_courierNotes;
		}

		public String orderer_email;

		public String getOrderer_email() {
			return this.orderer_email;
		}

		public String orderer_mobilePhone;

		public String getOrderer_mobilePhone() {
			return this.orderer_mobilePhone;
		}

		public String referenceInfo_surname;

		public String getReferenceInfo_surname() {
			return this.referenceInfo_surname;
		}

		public String referenceInfo_name;

		public String getReferenceInfo_name() {
			return this.referenceInfo_name;
		}

		public String referenceInfo_email;

		public String getReferenceInfo_email() {
			return this.referenceInfo_email;
		}

		public String referenceInfo_phone;

		public String getReferenceInfo_phone() {
			return this.referenceInfo_phone;
		}

		public String holderInfo_surname;

		public String getHolderInfo_surname() {
			return this.holderInfo_surname;
		}

		public String holderInfo_street;

		public String getHolderInfo_street() {
			return this.holderInfo_street;
		}

		public String holderInfo_zipCode;

		public String getHolderInfo_zipCode() {
			return this.holderInfo_zipCode;
		}

		public String holderInfo_city;

		public String getHolderInfo_city() {
			return this.holderInfo_city;
		}

		public String holderInfo_province;

		public String getHolderInfo_province() {
			return this.holderInfo_province;
		}

		public String holderInfo_state;

		public String getHolderInfo_state() {
			return this.holderInfo_state;
		}

		public String holderInfo_taxCode;

		public String getHolderInfo_taxCode() {
			return this.holderInfo_taxCode;
		}

		public Character otherInfo_giftFlag;

		public Character getOtherInfo_giftFlag() {
			return this.otherInfo_giftFlag;
		}

		public String otherInfo_webDomainFlag;

		public String getOtherInfo_webDomainFlag() {
			return this.otherInfo_webDomainFlag;
		}

		public String otherInfo_webDomainUrl;

		public String getOtherInfo_webDomainUrl() {
			return this.otherInfo_webDomainUrl;
		}

		public String otherInfo_eCommerceDomainFlag;

		public String getOtherInfo_eCommerceDomainFlag() {
			return this.otherInfo_eCommerceDomainFlag;
		}

		public String otherInfo_eCommerceDomainUrl;

		public String getOtherInfo_eCommerceDomainUrl() {
			return this.otherInfo_eCommerceDomainUrl;
		}

		public String product_code;

		public String getProduct_code() {
			return this.product_code;
		}

		public String product_description;

		public String getProduct_description() {
			return this.product_description;
		}

		public String product_itemsNumber;

		public String getProduct_itemsNumber() {
			return this.product_itemsNumber;
		}

		public String product_price;

		public String getProduct_price() {
			return this.product_price;
		}

		public Integer totalItems;

		public Integer getTotalItems() {
			return this.totalItems;
		}

		public Float totalPrice;

		public Float getTotalPrice() {
			return this.totalPrice;
		}

		public String VATRate;

		public String getVATRate() {
			return this.VATRate;
		}

		public String shippingCost;

		public String getShippingCost() {
			return this.shippingCost;
		}

		public Float shippingCostAmount;

		public Float getShippingCostAmount() {
			return this.shippingCostAmount;
		}

		public String registrationDate;

		public String getRegistrationDate() {
			return this.registrationDate;
		}

		public String paymentMethod;

		public String getPaymentMethod() {
			return this.paymentMethod;
		}

		public String paymentDate;

		public String getPaymentDate() {
			return this.paymentDate;
		}

		public String creditTransferIBAN;

		public String getCreditTransferIBAN() {
			return this.creditTransferIBAN;
		}

		public String transactionReference;

		public String getTransactionReference() {
			return this.transactionReference;
		}

		public String partnerAccountIBAN;

		public String getPartnerAccountIBAN() {
			return this.partnerAccountIBAN;
		}

		public String branch_phone;

		public String getBranch_phone() {
			return this.branch_phone;
		}

		public String branch_email;

		public String getBranch_email() {
			return this.branch_email;
		}

		public Integer shippingAddtionalInfo_floorNumberDelivery;

		public Integer getShippingAddtionalInfo_floorNumberDelivery() {
			return this.shippingAddtionalInfo_floorNumberDelivery;
		}

		public String shippingAddtionalInfo_houseWithLift;

		public String getShippingAddtionalInfo_houseWithLift() {
			return this.shippingAddtionalInfo_houseWithLift;
		}

		public String shippingAddtionalInfo_tradeIn;

		public String getShippingAddtionalInfo_tradeIn() {
			return this.shippingAddtionalInfo_tradeIn;
		}

		public String orderer_giftEmail;

		public String getOrderer_giftEmail() {
			return this.orderer_giftEmail;
		}

		public String shippingMobilePhone;

		public String getShippingMobilePhone() {
			return this.shippingMobilePhone;
		}

		public String orderer_company_expertise;

		public String getOrderer_company_expertise() {
			return this.orderer_company_expertise;
		}

		public String surname;

		public String getSurname() {
			return this.surname;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String taxCode;

		public String getTaxCode() {
			return this.taxCode;
		}

		public Character sex;

		public Character getSex() {
			return this.sex;
		}

		public Character bornDate;

		public Character getBornDate() {
			return this.bornDate;
		}

		public Character bornPlace;

		public Character getBornPlace() {
			return this.bornPlace;
		}

		public Character typeDocument;

		public Character getTypeDocument() {
			return this.typeDocument;
		}

		public Character numberDocument;

		public Character getNumberDocument() {
			return this.numberDocument;
		}

		public Character nationality;

		public Character getNationality() {
			return this.nationality;
		}

		public String phone;

		public String getPhone() {
			return this.phone;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public Float product_priceOrig;

		public Float getProduct_priceOrig() {
			return this.product_priceOrig;
		}

		public Float discount;

		public Float getDiscount() {
			return this.discount;
		}

		public String flPercentage;

		public String getFlPercentage() {
			return this.flPercentage;
		}

		public Integer itemsNumberDiscount;

		public Integer getItemsNumberDiscount() {
			return this.itemsNumberDiscount;
		}

		public Character detail1;

		public Character getDetail1() {
			return this.detail1;
		}

		public Character detail2;

		public Character getDetail2() {
			return this.detail2;
		}

		public Character detail3;

		public Character getDetail3() {
			return this.detail3;
		}

		public Character detail4;

		public Character getDetail4() {
			return this.detail4;
		}

		public String detail5;

		public String getDetail5() {
			return this.detail5;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_ReadCSV.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_ReadCSV.length == 0) {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_ReadCSV, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_ReadCSV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_ReadCSV) {

				try {

					int length = 0;

					this.partnerName = readString(dis);

					this.promoID = readString(dis);

					this.promoDescription = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status = null;
					} else {
						this.status = dis.readChar();
					}

					this.subscriber_surname = readString(dis);

					this.subscriber_name = readString(dis);

					this.subscriber_type = readString(dis);

					this.orderer_surname = readString(dis);

					this.orderer_name = readString(dis);

					this.orderer_taxCode = readString(dis);

					this.orderer_VATRegistrationNumber = readString(dis);

					this.residenceAddress_street = readString(dis);

					this.residenceAddress_zipCode = readString(dis);

					this.residenceAddress_city = readString(dis);

					this.residenceAddress_province = readString(dis);

					this.residenceAddress_state = readString(dis);

					this.shippingAddress_surname = readString(dis);

					this.shippingAddress_name = readString(dis);

					this.shippingAddress_careOf = readString(dis);

					this.shippingAddress_street = readString(dis);

					this.shippingAddress_zipCode = readString(dis);

					this.shippingAddress_city = readString(dis);

					this.shippingAddress_province = readString(dis);

					this.shippingAddress_state = readString(dis);

					this.shippingAddtionalInfo_addressWithinZTL = readString(dis);

					this.shippingAddtionalInfo_addressNearCarPark = readString(dis);

					this.shippingAddtionalInfo_houseWithNarrowPass = readString(dis);

					this.shippingAddtionalInfo_specificFloorDelivery = readString(dis);

					this.shippingAddtionalInfo_preferredDeliveryDate = readString(dis);

					this.shippingAddtionalInfo_preferredDeliveryTime = readString(dis);

					this.shippingAddtionalInfo_courierNotes = readString(dis);

					this.orderer_email = readString(dis);

					this.orderer_mobilePhone = readString(dis);

					this.referenceInfo_surname = readString(dis);

					this.referenceInfo_name = readString(dis);

					this.referenceInfo_email = readString(dis);

					this.referenceInfo_phone = readString(dis);

					this.holderInfo_surname = readString(dis);

					this.holderInfo_street = readString(dis);

					this.holderInfo_zipCode = readString(dis);

					this.holderInfo_city = readString(dis);

					this.holderInfo_province = readString(dis);

					this.holderInfo_state = readString(dis);

					this.holderInfo_taxCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.otherInfo_giftFlag = null;
					} else {
						this.otherInfo_giftFlag = dis.readChar();
					}

					this.otherInfo_webDomainFlag = readString(dis);

					this.otherInfo_webDomainUrl = readString(dis);

					this.otherInfo_eCommerceDomainFlag = readString(dis);

					this.otherInfo_eCommerceDomainUrl = readString(dis);

					this.product_code = readString(dis);

					this.product_description = readString(dis);

					this.product_itemsNumber = readString(dis);

					this.product_price = readString(dis);

					this.totalItems = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.totalPrice = null;
					} else {
						this.totalPrice = dis.readFloat();
					}

					this.VATRate = readString(dis);

					this.shippingCost = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.shippingCostAmount = null;
					} else {
						this.shippingCostAmount = dis.readFloat();
					}

					this.registrationDate = readString(dis);

					this.paymentMethod = readString(dis);

					this.paymentDate = readString(dis);

					this.creditTransferIBAN = readString(dis);

					this.transactionReference = readString(dis);

					this.partnerAccountIBAN = readString(dis);

					this.branch_phone = readString(dis);

					this.branch_email = readString(dis);

					this.shippingAddtionalInfo_floorNumberDelivery = readInteger(dis);

					this.shippingAddtionalInfo_houseWithLift = readString(dis);

					this.shippingAddtionalInfo_tradeIn = readString(dis);

					this.orderer_giftEmail = readString(dis);

					this.shippingMobilePhone = readString(dis);

					this.orderer_company_expertise = readString(dis);

					this.surname = readString(dis);

					this.name = readString(dis);

					this.taxCode = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.sex = null;
					} else {
						this.sex = dis.readChar();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bornDate = null;
					} else {
						this.bornDate = dis.readChar();
					}

					length = dis.readByte();
					if (length == -1) {
						this.bornPlace = null;
					} else {
						this.bornPlace = dis.readChar();
					}

					length = dis.readByte();
					if (length == -1) {
						this.typeDocument = null;
					} else {
						this.typeDocument = dis.readChar();
					}

					length = dis.readByte();
					if (length == -1) {
						this.numberDocument = null;
					} else {
						this.numberDocument = dis.readChar();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nationality = null;
					} else {
						this.nationality = dis.readChar();
					}

					this.phone = readString(dis);

					this.email = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.product_priceOrig = null;
					} else {
						this.product_priceOrig = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.discount = null;
					} else {
						this.discount = dis.readFloat();
					}

					this.flPercentage = readString(dis);

					this.itemsNumberDiscount = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.detail1 = null;
					} else {
						this.detail1 = dis.readChar();
					}

					length = dis.readByte();
					if (length == -1) {
						this.detail2 = null;
					} else {
						this.detail2 = dis.readChar();
					}

					length = dis.readByte();
					if (length == -1) {
						this.detail3 = null;
					} else {
						this.detail3 = dis.readChar();
					}

					length = dis.readByte();
					if (length == -1) {
						this.detail4 = null;
					} else {
						this.detail4 = dis.readChar();
					}

					this.detail5 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.partnerName, dos);

				// String

				writeString(this.promoID, dos);

				// String

				writeString(this.promoDescription, dos);

				// Character

				if (this.status == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.status);
				}

				// String

				writeString(this.subscriber_surname, dos);

				// String

				writeString(this.subscriber_name, dos);

				// String

				writeString(this.subscriber_type, dos);

				// String

				writeString(this.orderer_surname, dos);

				// String

				writeString(this.orderer_name, dos);

				// String

				writeString(this.orderer_taxCode, dos);

				// String

				writeString(this.orderer_VATRegistrationNumber, dos);

				// String

				writeString(this.residenceAddress_street, dos);

				// String

				writeString(this.residenceAddress_zipCode, dos);

				// String

				writeString(this.residenceAddress_city, dos);

				// String

				writeString(this.residenceAddress_province, dos);

				// String

				writeString(this.residenceAddress_state, dos);

				// String

				writeString(this.shippingAddress_surname, dos);

				// String

				writeString(this.shippingAddress_name, dos);

				// String

				writeString(this.shippingAddress_careOf, dos);

				// String

				writeString(this.shippingAddress_street, dos);

				// String

				writeString(this.shippingAddress_zipCode, dos);

				// String

				writeString(this.shippingAddress_city, dos);

				// String

				writeString(this.shippingAddress_province, dos);

				// String

				writeString(this.shippingAddress_state, dos);

				// String

				writeString(this.shippingAddtionalInfo_addressWithinZTL, dos);

				// String

				writeString(this.shippingAddtionalInfo_addressNearCarPark, dos);

				// String

				writeString(this.shippingAddtionalInfo_houseWithNarrowPass, dos);

				// String

				writeString(this.shippingAddtionalInfo_specificFloorDelivery,
						dos);

				// String

				writeString(this.shippingAddtionalInfo_preferredDeliveryDate,
						dos);

				// String

				writeString(this.shippingAddtionalInfo_preferredDeliveryTime,
						dos);

				// String

				writeString(this.shippingAddtionalInfo_courierNotes, dos);

				// String

				writeString(this.orderer_email, dos);

				// String

				writeString(this.orderer_mobilePhone, dos);

				// String

				writeString(this.referenceInfo_surname, dos);

				// String

				writeString(this.referenceInfo_name, dos);

				// String

				writeString(this.referenceInfo_email, dos);

				// String

				writeString(this.referenceInfo_phone, dos);

				// String

				writeString(this.holderInfo_surname, dos);

				// String

				writeString(this.holderInfo_street, dos);

				// String

				writeString(this.holderInfo_zipCode, dos);

				// String

				writeString(this.holderInfo_city, dos);

				// String

				writeString(this.holderInfo_province, dos);

				// String

				writeString(this.holderInfo_state, dos);

				// String

				writeString(this.holderInfo_taxCode, dos);

				// Character

				if (this.otherInfo_giftFlag == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.otherInfo_giftFlag);
				}

				// String

				writeString(this.otherInfo_webDomainFlag, dos);

				// String

				writeString(this.otherInfo_webDomainUrl, dos);

				// String

				writeString(this.otherInfo_eCommerceDomainFlag, dos);

				// String

				writeString(this.otherInfo_eCommerceDomainUrl, dos);

				// String

				writeString(this.product_code, dos);

				// String

				writeString(this.product_description, dos);

				// String

				writeString(this.product_itemsNumber, dos);

				// String

				writeString(this.product_price, dos);

				// Integer

				writeInteger(this.totalItems, dos);

				// Float

				if (this.totalPrice == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.totalPrice);
				}

				// String

				writeString(this.VATRate, dos);

				// String

				writeString(this.shippingCost, dos);

				// Float

				if (this.shippingCostAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.shippingCostAmount);
				}

				// String

				writeString(this.registrationDate, dos);

				// String

				writeString(this.paymentMethod, dos);

				// String

				writeString(this.paymentDate, dos);

				// String

				writeString(this.creditTransferIBAN, dos);

				// String

				writeString(this.transactionReference, dos);

				// String

				writeString(this.partnerAccountIBAN, dos);

				// String

				writeString(this.branch_phone, dos);

				// String

				writeString(this.branch_email, dos);

				// Integer

				writeInteger(this.shippingAddtionalInfo_floorNumberDelivery,
						dos);

				// String

				writeString(this.shippingAddtionalInfo_houseWithLift, dos);

				// String

				writeString(this.shippingAddtionalInfo_tradeIn, dos);

				// String

				writeString(this.orderer_giftEmail, dos);

				// String

				writeString(this.shippingMobilePhone, dos);

				// String

				writeString(this.orderer_company_expertise, dos);

				// String

				writeString(this.surname, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.taxCode, dos);

				// Character

				if (this.sex == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.sex);
				}

				// Character

				if (this.bornDate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.bornDate);
				}

				// Character

				if (this.bornPlace == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.bornPlace);
				}

				// Character

				if (this.typeDocument == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.typeDocument);
				}

				// Character

				if (this.numberDocument == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.numberDocument);
				}

				// Character

				if (this.nationality == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.nationality);
				}

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.email, dos);

				// Float

				if (this.product_priceOrig == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.product_priceOrig);
				}

				// Float

				if (this.discount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.discount);
				}

				// String

				writeString(this.flPercentage, dos);

				// Integer

				writeInteger(this.itemsNumberDiscount, dos);

				// Character

				if (this.detail1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.detail1);
				}

				// Character

				if (this.detail2 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.detail2);
				}

				// Character

				if (this.detail3 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.detail3);
				}

				// Character

				if (this.detail4 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.detail4);
				}

				// String

				writeString(this.detail5, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("partnerName=" + partnerName);
			sb.append(",promoID=" + promoID);
			sb.append(",promoDescription=" + promoDescription);
			sb.append(",status=" + String.valueOf(status));
			sb.append(",subscriber_surname=" + subscriber_surname);
			sb.append(",subscriber_name=" + subscriber_name);
			sb.append(",subscriber_type=" + subscriber_type);
			sb.append(",orderer_surname=" + orderer_surname);
			sb.append(",orderer_name=" + orderer_name);
			sb.append(",orderer_taxCode=" + orderer_taxCode);
			sb.append(",orderer_VATRegistrationNumber="
					+ orderer_VATRegistrationNumber);
			sb.append(",residenceAddress_street=" + residenceAddress_street);
			sb.append(",residenceAddress_zipCode=" + residenceAddress_zipCode);
			sb.append(",residenceAddress_city=" + residenceAddress_city);
			sb.append(",residenceAddress_province=" + residenceAddress_province);
			sb.append(",residenceAddress_state=" + residenceAddress_state);
			sb.append(",shippingAddress_surname=" + shippingAddress_surname);
			sb.append(",shippingAddress_name=" + shippingAddress_name);
			sb.append(",shippingAddress_careOf=" + shippingAddress_careOf);
			sb.append(",shippingAddress_street=" + shippingAddress_street);
			sb.append(",shippingAddress_zipCode=" + shippingAddress_zipCode);
			sb.append(",shippingAddress_city=" + shippingAddress_city);
			sb.append(",shippingAddress_province=" + shippingAddress_province);
			sb.append(",shippingAddress_state=" + shippingAddress_state);
			sb.append(",shippingAddtionalInfo_addressWithinZTL="
					+ shippingAddtionalInfo_addressWithinZTL);
			sb.append(",shippingAddtionalInfo_addressNearCarPark="
					+ shippingAddtionalInfo_addressNearCarPark);
			sb.append(",shippingAddtionalInfo_houseWithNarrowPass="
					+ shippingAddtionalInfo_houseWithNarrowPass);
			sb.append(",shippingAddtionalInfo_specificFloorDelivery="
					+ shippingAddtionalInfo_specificFloorDelivery);
			sb.append(",shippingAddtionalInfo_preferredDeliveryDate="
					+ shippingAddtionalInfo_preferredDeliveryDate);
			sb.append(",shippingAddtionalInfo_preferredDeliveryTime="
					+ shippingAddtionalInfo_preferredDeliveryTime);
			sb.append(",shippingAddtionalInfo_courierNotes="
					+ shippingAddtionalInfo_courierNotes);
			sb.append(",orderer_email=" + orderer_email);
			sb.append(",orderer_mobilePhone=" + orderer_mobilePhone);
			sb.append(",referenceInfo_surname=" + referenceInfo_surname);
			sb.append(",referenceInfo_name=" + referenceInfo_name);
			sb.append(",referenceInfo_email=" + referenceInfo_email);
			sb.append(",referenceInfo_phone=" + referenceInfo_phone);
			sb.append(",holderInfo_surname=" + holderInfo_surname);
			sb.append(",holderInfo_street=" + holderInfo_street);
			sb.append(",holderInfo_zipCode=" + holderInfo_zipCode);
			sb.append(",holderInfo_city=" + holderInfo_city);
			sb.append(",holderInfo_province=" + holderInfo_province);
			sb.append(",holderInfo_state=" + holderInfo_state);
			sb.append(",holderInfo_taxCode=" + holderInfo_taxCode);
			sb.append(",otherInfo_giftFlag="
					+ String.valueOf(otherInfo_giftFlag));
			sb.append(",otherInfo_webDomainFlag=" + otherInfo_webDomainFlag);
			sb.append(",otherInfo_webDomainUrl=" + otherInfo_webDomainUrl);
			sb.append(",otherInfo_eCommerceDomainFlag="
					+ otherInfo_eCommerceDomainFlag);
			sb.append(",otherInfo_eCommerceDomainUrl="
					+ otherInfo_eCommerceDomainUrl);
			sb.append(",product_code=" + product_code);
			sb.append(",product_description=" + product_description);
			sb.append(",product_itemsNumber=" + product_itemsNumber);
			sb.append(",product_price=" + product_price);
			sb.append(",totalItems=" + String.valueOf(totalItems));
			sb.append(",totalPrice=" + String.valueOf(totalPrice));
			sb.append(",VATRate=" + VATRate);
			sb.append(",shippingCost=" + shippingCost);
			sb.append(",shippingCostAmount="
					+ String.valueOf(shippingCostAmount));
			sb.append(",registrationDate=" + registrationDate);
			sb.append(",paymentMethod=" + paymentMethod);
			sb.append(",paymentDate=" + paymentDate);
			sb.append(",creditTransferIBAN=" + creditTransferIBAN);
			sb.append(",transactionReference=" + transactionReference);
			sb.append(",partnerAccountIBAN=" + partnerAccountIBAN);
			sb.append(",branch_phone=" + branch_phone);
			sb.append(",branch_email=" + branch_email);
			sb.append(",shippingAddtionalInfo_floorNumberDelivery="
					+ String.valueOf(shippingAddtionalInfo_floorNumberDelivery));
			sb.append(",shippingAddtionalInfo_houseWithLift="
					+ shippingAddtionalInfo_houseWithLift);
			sb.append(",shippingAddtionalInfo_tradeIn="
					+ shippingAddtionalInfo_tradeIn);
			sb.append(",orderer_giftEmail=" + orderer_giftEmail);
			sb.append(",shippingMobilePhone=" + shippingMobilePhone);
			sb.append(",orderer_company_expertise=" + orderer_company_expertise);
			sb.append(",surname=" + surname);
			sb.append(",name=" + name);
			sb.append(",taxCode=" + taxCode);
			sb.append(",sex=" + String.valueOf(sex));
			sb.append(",bornDate=" + String.valueOf(bornDate));
			sb.append(",bornPlace=" + String.valueOf(bornPlace));
			sb.append(",typeDocument=" + String.valueOf(typeDocument));
			sb.append(",numberDocument=" + String.valueOf(numberDocument));
			sb.append(",nationality=" + String.valueOf(nationality));
			sb.append(",phone=" + phone);
			sb.append(",email=" + email);
			sb.append(",product_priceOrig=" + String.valueOf(product_priceOrig));
			sb.append(",discount=" + String.valueOf(discount));
			sb.append(",flPercentage=" + flPercentage);
			sb.append(",itemsNumberDiscount="
					+ String.valueOf(itemsNumberDiscount));
			sb.append(",detail1=" + String.valueOf(detail1));
			sb.append(",detail2=" + String.valueOf(detail2));
			sb.append(",detail3=" + String.valueOf(detail3));
			sb.append(",detail4=" + String.valueOf(detail4));
			sb.append(",detail5=" + detail5);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				orderStruct order = new orderStruct();
				rejectedStruct rejected = new rejectedStruct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "ots_order";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_1 = null;
				if (dbProperties_tMysqlOutput_1 == null
						|| dbProperties_tMysqlOutput_1.trim().length() == 0) {
					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "fw_zuora" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "fw_zuora" + "?"
							+ properties_tMysqlOutput_1;
				}
				String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_1 = "root";

				final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
				java.lang.Class.forName(driverClass_tMysqlOutput_1);

				conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_1, dbUser_tMysqlOutput_1,
						dbPwd_tMysqlOutput_1);

				resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
				conn_tMysqlOutput_1.setAutoCommit(false);
				int commitEvery_tMysqlOutput_1 = 10000;
				int commitCounter_tMysqlOutput_1 = 0;

				int count_tMysqlOutput_1 = 0;

				java.sql.Statement stmtTruncCount_tMysqlOutput_1 = conn_tMysqlOutput_1
						.createStatement();
				java.sql.ResultSet rsTruncCount_tMysqlOutput_1 = stmtTruncCount_tMysqlOutput_1
						.executeQuery("SELECT COUNT(1) FROM `"
								+ tableName_tMysqlOutput_1 + "`");
				int rsTruncCountNumber_tMysqlOutput_1 = 0;
				if (rsTruncCount_tMysqlOutput_1.next()) {
					rsTruncCountNumber_tMysqlOutput_1 = rsTruncCount_tMysqlOutput_1
							.getInt(1);
				}
				rsTruncCount_tMysqlOutput_1.close();
				stmtTruncCount_tMysqlOutput_1.close();
				java.sql.Statement stmtTrunc_tMysqlOutput_1 = conn_tMysqlOutput_1
						.createStatement();
				stmtTrunc_tMysqlOutput_1.executeUpdate("TRUNCATE TABLE `"
						+ tableName_tMysqlOutput_1 + "`");
				deletedCount_tMysqlOutput_1 += rsTruncCountNumber_tMysqlOutput_1;
				stmtTrunc_tMysqlOutput_1.close();

				String insert_tMysqlOutput_1 = "INSERT INTO `"
						+ "ots_order"
						+ "` (`id`,`promoID`,`subscriber_surname`,`subscriber_name`,`subscriber_type`,`orderer_surname`,`orderer_name`,`orderer_taxCode`,`orderer_VATRegistrationNumber`,`residenceAddress_street`,`residenceAddress_zipCode`,`residenceAddress_city`,`residenceAddress_province`,`residenceAddress_state`,`shippingAddress_surname`,`shippingAddress_name`,`shippingAddress_careOf`,`shippingAddress_street`,`shippingAddress_zipCode`,`shippingAddress_city`,`shippingAddress_province`,`shippingAddress_state`,`orderer_email`,`orderer_mobilePhone`,`product_code`,`product_description`,`product_itemsNumber`,`product_price`,`VATRate`,`registrationDate`,`paymentMethod`,`paymentDate`,`creditTransferIBAN`,`transactionReference`,`branch_phone`,`branch_email`,`shippingMobilePhone`,`totalItems`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_1 = 100;
				int batchSizeCounter_tMysqlOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insert_tMysqlOutput_1);

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/ETL_FASTWEB/ZUORA/data/exports/order_rejected."
								+ TalendDate.formatDate("yyMMdd",
										TalendDate.getCurrentDate()) + ".csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"UTF-8"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("promoID");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("orderer_surname");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("orderer_taxCode");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1
							.write("orderer_VATRegistrationNumber");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("residenceAddress_street");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("residenceAddress_zipCode");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("residenceAddress_city");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1
							.write("residenceAddress_province");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("orderer_email");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("totalItems");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("registrationDate");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				orderStruct order_tmp = new orderStruct();
				rejectedStruct rejected_tmp = new rejectedStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/ETL_FASTWEB/ZUORA/data/Order_list_Fastweb.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/ETL_FASTWEB/ZUORA/data/Order_list_Fastweb.csv",
								"UTF-8", ";", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.partnerName = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.promoID = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.promoDescription = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.status = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.status = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.subscriber_surname = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.subscriber_name = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.subscriber_type = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.orderer_surname = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.orderer_name = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.orderer_taxCode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.orderer_VATRegistrationNumber = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.residenceAddress_street = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row1.residenceAddress_zipCode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row1.residenceAddress_city = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row1.residenceAddress_province = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row1.residenceAddress_state = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row1.shippingAddress_surname = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row1.shippingAddress_name = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row1.shippingAddress_careOf = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row1.shippingAddress_street = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row1.shippingAddress_zipCode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row1.shippingAddress_city = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row1.shippingAddress_province = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row1.shippingAddress_state = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row1.shippingAddtionalInfo_addressWithinZTL = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							row1.shippingAddtionalInfo_addressNearCarPark = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row1.shippingAddtionalInfo_houseWithNarrowPass = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							row1.shippingAddtionalInfo_specificFloorDelivery = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row1.shippingAddtionalInfo_preferredDeliveryDate = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row1.shippingAddtionalInfo_preferredDeliveryTime = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row1.shippingAddtionalInfo_courierNotes = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row1.orderer_email = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row1.orderer_mobilePhone = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 33;

							row1.referenceInfo_surname = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 34;

							row1.referenceInfo_name = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 35;

							row1.referenceInfo_email = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 36;

							row1.referenceInfo_phone = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 37;

							row1.holderInfo_surname = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 38;

							row1.holderInfo_street = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 39;

							row1.holderInfo_zipCode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 40;

							row1.holderInfo_city = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 41;

							row1.holderInfo_province = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 42;

							row1.holderInfo_state = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 43;

							row1.holderInfo_taxCode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 44;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.otherInfo_giftFlag = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.otherInfo_giftFlag = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 45;

							row1.otherInfo_webDomainFlag = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 46;

							row1.otherInfo_webDomainUrl = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 47;

							row1.otherInfo_eCommerceDomainFlag = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 48;

							row1.otherInfo_eCommerceDomainUrl = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 49;

							row1.product_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 50;

							row1.product_description = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 51;

							row1.product_itemsNumber = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 52;

							row1.product_price = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 53;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.totalItems = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.totalItems = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 54;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.totalPrice = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.totalPrice = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 55;

							row1.VATRate = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 56;

							row1.shippingCost = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 57;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.shippingCostAmount = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.shippingCostAmount = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 58;

							row1.registrationDate = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 59;

							row1.paymentMethod = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 60;

							row1.paymentDate = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 61;

							row1.creditTransferIBAN = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 62;

							row1.transactionReference = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 63;

							row1.partnerAccountIBAN = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 64;

							row1.branch_phone = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 65;

							row1.branch_email = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 66;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.shippingAddtionalInfo_floorNumberDelivery = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.shippingAddtionalInfo_floorNumberDelivery = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 67;

							row1.shippingAddtionalInfo_houseWithLift = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 68;

							row1.shippingAddtionalInfo_tradeIn = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 69;

							row1.orderer_giftEmail = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 70;

							row1.shippingMobilePhone = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 71;

							row1.orderer_company_expertise = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 72;

							row1.surname = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 73;

							row1.name = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 74;

							row1.taxCode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 75;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.sex = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.sex = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 76;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.bornDate = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.bornDate = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 77;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.bornPlace = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.bornPlace = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 78;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.typeDocument = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.typeDocument = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 79;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.numberDocument = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.numberDocument = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 80;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.nationality = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.nationality = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 81;

							row1.phone = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 82;

							row1.email = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 83;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.product_priceOrig = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.product_priceOrig = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 84;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.discount = ParserUtils
											.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.discount = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 85;

							row1.flPercentage = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 86;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.itemsNumberDiscount = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.itemsNumberDiscount = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 87;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.detail1 = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.detail1 = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 88;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.detail2 = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.detail2 = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 89;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.detail3 = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.detail3 = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 90;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.detail4 = ParserUtils
											.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row1.detail4 = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 91;

							row1.detail5 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								order = null;
								rejected = null;

								boolean rejected_tMap_1 = true;

								// # Output table : 'order'
								// # Filter conditions
								if (

								!Relational.ISNULL(row1.promoID)
										&& !row1.promoID.equals("")
										&& !Relational
												.ISNULL(row1.orderer_surname)
										&& !row1.orderer_surname.equals("")
										&& !Relational
												.ISNULL(row1.residenceAddress_street)
										&& !row1.residenceAddress_street
												.equals("")
										&& !Relational
												.ISNULL(row1.residenceAddress_zipCode)
										&& !row1.residenceAddress_zipCode
												.equals("")
										&& !Relational
												.ISNULL(row1.residenceAddress_city)
										&& !row1.residenceAddress_city
												.equals("")
										&& !Relational
												.ISNULL(row1.residenceAddress_province)
										&& !row1.residenceAddress_province
												.equals("")
										&& !Relational
												.ISNULL(row1.orderer_email)
										&& !row1.orderer_email.equals("")
										&& !Relational.ISNULL(row1.totalItems)
										&& !row1.totalItems.equals("")
										&& !Relational
												.ISNULL(row1.registrationDate)
										&& !row1.registrationDate.equals("")
										&& (!Relational
												.ISNULL(row1.orderer_VATRegistrationNumber)
												&& !row1.orderer_VATRegistrationNumber
														.equals("") || !Relational
												.ISNULL(row1.orderer_taxCode)
												&& !row1.orderer_taxCode
														.equals(""))

								) {
									rejected_tMap_1 = false;
									order_tmp.id = 0;
									order_tmp.promoID = row1.promoID;
									order_tmp.subscriber_surname = row1.subscriber_surname;
									order_tmp.subscriber_name = row1.subscriber_name;
									order_tmp.subscriber_type = row1.subscriber_type;
									order_tmp.orderer_surname = row1.orderer_surname;
									order_tmp.orderer_name = row1.orderer_name;
									order_tmp.orderer_taxCode = row1.orderer_taxCode;
									order_tmp.orderer_VATRegistrationNumber = (Relational
											.ISNULL(row1.orderer_VATRegistrationNumber) || row1.orderer_VATRegistrationNumber
											.equals("")) ? row1.orderer_taxCode
											: row1.orderer_VATRegistrationNumber;
									order_tmp.residenceAddress_street = row1.residenceAddress_street;
									order_tmp.residenceAddress_zipCode = row1.residenceAddress_zipCode;
									order_tmp.residenceAddress_city = row1.residenceAddress_city;
									order_tmp.residenceAddress_province = row1.residenceAddress_province;
									order_tmp.residenceAddress_state = "Italy";
									order_tmp.shippingAddress_surname = row1.shippingAddress_surname;
									order_tmp.shippingAddress_name = row1.shippingAddress_name;
									order_tmp.shippingAddress_careOf = row1.shippingAddress_careOf;
									order_tmp.shippingAddress_street = row1.shippingAddress_street;
									order_tmp.shippingAddress_zipCode = row1.shippingAddress_zipCode;
									order_tmp.shippingAddress_city = row1.shippingAddress_city;
									order_tmp.shippingAddress_province = row1.shippingAddress_province;
									order_tmp.shippingAddress_state = "Italy";
									order_tmp.orderer_email = row1.orderer_email;
									order_tmp.orderer_mobilePhone = row1.orderer_mobilePhone;
									order_tmp.product_code = row1.product_code;
									order_tmp.product_description = row1.product_description;
									order_tmp.product_itemsNumber = row1.product_itemsNumber;
									order_tmp.product_price = row1.product_price;
									order_tmp.VATRate = row1.VATRate;
									order_tmp.registrationDate = row1.registrationDate;
									order_tmp.paymentMethod = row1.paymentMethod;
									order_tmp.paymentDate = row1.paymentDate;
									order_tmp.creditTransferIBAN = row1.creditTransferIBAN;
									order_tmp.transactionReference = row1.transactionReference;
									order_tmp.branch_phone = row1.branch_phone;
									order_tmp.branch_email = row1.branch_email;
									order_tmp.shippingMobilePhone = row1.shippingMobilePhone;
									order_tmp.totalItems = row1.totalItems;
									order = order_tmp;
								} // closing filter/reject
									// ###### START REJECTS #####

								// # Output reject table : 'rejected'
								// # Filter conditions
								if (rejected_tMap_1) {
									rejected_tmp.promoID = row1.promoID;
									rejected_tmp.orderer_surname = row1.orderer_surname;
									rejected_tmp.orderer_taxCode = row1.orderer_taxCode;
									rejected_tmp.orderer_VATRegistrationNumber = row1.orderer_VATRegistrationNumber;
									rejected_tmp.residenceAddress_street = row1.residenceAddress_street;
									rejected_tmp.residenceAddress_zipCode = row1.residenceAddress_zipCode;
									rejected_tmp.residenceAddress_city = row1.residenceAddress_city;
									rejected_tmp.residenceAddress_province = row1.residenceAddress_province;
									rejected_tmp.orderer_email = row1.orderer_email;
									rejected_tmp.totalItems = row1.totalItems;
									rejected_tmp.registrationDate = row1.registrationDate;
									rejected = rejected_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "order"
							if (order != null) {

								/**
								 * [tMysqlOutput_1 main ] start
								 */

								currentComponent = "tMysqlOutput_1";

								whetherReject_tMysqlOutput_1 = false;
								pstmt_tMysqlOutput_1.setLong(1, order.id);

								if (order.promoID == null) {
									pstmt_tMysqlOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(2,
											order.promoID);
								}

								if (order.subscriber_surname == null) {
									pstmt_tMysqlOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(3,
											order.subscriber_surname);
								}

								if (order.subscriber_name == null) {
									pstmt_tMysqlOutput_1.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(4,
											order.subscriber_name);
								}

								if (order.subscriber_type == null) {
									pstmt_tMysqlOutput_1.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(5,
											order.subscriber_type);
								}

								if (order.orderer_surname == null) {
									pstmt_tMysqlOutput_1.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(6,
											order.orderer_surname);
								}

								if (order.orderer_name == null) {
									pstmt_tMysqlOutput_1.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(7,
											order.orderer_name);
								}

								if (order.orderer_taxCode == null) {
									pstmt_tMysqlOutput_1.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(8,
											order.orderer_taxCode);
								}

								if (order.orderer_VATRegistrationNumber == null) {
									pstmt_tMysqlOutput_1.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1
											.setString(
													9,
													order.orderer_VATRegistrationNumber);
								}

								if (order.residenceAddress_street == null) {
									pstmt_tMysqlOutput_1.setNull(10,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(10,
											order.residenceAddress_street);
								}

								if (order.residenceAddress_zipCode == null) {
									pstmt_tMysqlOutput_1.setNull(11,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(11,
											order.residenceAddress_zipCode);
								}

								if (order.residenceAddress_city == null) {
									pstmt_tMysqlOutput_1.setNull(12,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(12,
											order.residenceAddress_city);
								}

								if (order.residenceAddress_province == null) {
									pstmt_tMysqlOutput_1.setNull(13,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(13,
											order.residenceAddress_province);
								}

								if (order.residenceAddress_state == null) {
									pstmt_tMysqlOutput_1.setNull(14,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(14,
											order.residenceAddress_state);
								}

								if (order.shippingAddress_surname == null) {
									pstmt_tMysqlOutput_1.setNull(15,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(15,
											order.shippingAddress_surname);
								}

								if (order.shippingAddress_name == null) {
									pstmt_tMysqlOutput_1.setNull(16,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(16,
											order.shippingAddress_name);
								}

								if (order.shippingAddress_careOf == null) {
									pstmt_tMysqlOutput_1.setNull(17,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(17,
											order.shippingAddress_careOf);
								}

								if (order.shippingAddress_street == null) {
									pstmt_tMysqlOutput_1.setNull(18,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(18,
											order.shippingAddress_street);
								}

								if (order.shippingAddress_zipCode == null) {
									pstmt_tMysqlOutput_1.setNull(19,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(19,
											order.shippingAddress_zipCode);
								}

								if (order.shippingAddress_city == null) {
									pstmt_tMysqlOutput_1.setNull(20,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(20,
											order.shippingAddress_city);
								}

								if (order.shippingAddress_province == null) {
									pstmt_tMysqlOutput_1.setNull(21,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(21,
											order.shippingAddress_province);
								}

								if (order.shippingAddress_state == null) {
									pstmt_tMysqlOutput_1.setNull(22,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(22,
											order.shippingAddress_state);
								}

								if (order.orderer_email == null) {
									pstmt_tMysqlOutput_1.setNull(23,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(23,
											order.orderer_email);
								}

								if (order.orderer_mobilePhone == null) {
									pstmt_tMysqlOutput_1.setNull(24,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(24,
											order.orderer_mobilePhone);
								}

								if (order.product_code == null) {
									pstmt_tMysqlOutput_1.setNull(25,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(25,
											order.product_code);
								}

								if (order.product_description == null) {
									pstmt_tMysqlOutput_1.setNull(26,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(26,
											order.product_description);
								}

								if (order.product_itemsNumber == null) {
									pstmt_tMysqlOutput_1.setNull(27,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(27,
											order.product_itemsNumber);
								}

								if (order.product_price == null) {
									pstmt_tMysqlOutput_1.setNull(28,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(28,
											order.product_price);
								}

								if (order.VATRate == null) {
									pstmt_tMysqlOutput_1.setNull(29,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(29,
											order.VATRate);
								}

								if (order.registrationDate == null) {
									pstmt_tMysqlOutput_1.setNull(30,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(30,
											order.registrationDate);
								}

								if (order.paymentMethod == null) {
									pstmt_tMysqlOutput_1.setNull(31,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(31,
											order.paymentMethod);
								}

								if (order.paymentDate == null) {
									pstmt_tMysqlOutput_1.setNull(32,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(32,
											order.paymentDate);
								}

								if (order.creditTransferIBAN == null) {
									pstmt_tMysqlOutput_1.setNull(33,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(33,
											order.creditTransferIBAN);
								}

								if (order.transactionReference == null) {
									pstmt_tMysqlOutput_1.setNull(34,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(34,
											order.transactionReference);
								}

								if (order.branch_phone == null) {
									pstmt_tMysqlOutput_1.setNull(35,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(35,
											order.branch_phone);
								}

								if (order.branch_email == null) {
									pstmt_tMysqlOutput_1.setNull(36,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(36,
											order.branch_email);
								}

								if (order.shippingMobilePhone == null) {
									pstmt_tMysqlOutput_1.setNull(37,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(37,
											order.shippingMobilePhone);
								}

								pstmt_tMysqlOutput_1.setInt(38,
										order.totalItems);

								pstmt_tMysqlOutput_1.addBatch();
								nb_line_tMysqlOutput_1++;

								batchSizeCounter_tMysqlOutput_1++;
								if (batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
									try {
										int countSum_tMysqlOutput_1 = 0;
										for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
												.executeBatch()) {
											countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
													: 1);
										}
										insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tMysqlOutput_1 = 0;
										for (int countEach_tMysqlOutput_1 : e
												.getUpdateCounts()) {
											countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
													: countEach_tMysqlOutput_1);
										}
										insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
										System.err.println(e.getMessage());
									}

									batchSizeCounter_tMysqlOutput_1 = 0;
								}
								commitCounter_tMysqlOutput_1++;

								if (commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

									try {
										int countSum_tMysqlOutput_1 = 0;
										for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
												.executeBatch()) {
											countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
													: 1);
										}
										insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tMysqlOutput_1 = 0;
										for (int countEach_tMysqlOutput_1 : e
												.getUpdateCounts()) {
											countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
													: countEach_tMysqlOutput_1);
										}
										insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
										System.err.println(e.getMessage());

									}
									conn_tMysqlOutput_1.commit();
									commitCounter_tMysqlOutput_1 = 0;

								}

								tos_count_tMysqlOutput_1++;

								/**
								 * [tMysqlOutput_1 main ] stop
								 */

							} // End of branch "order"

							// Start of branch "rejected"
							if (rejected != null) {

								/**
								 * [tFileOutputDelimited_1 main ] start
								 */

								currentComponent = "tFileOutputDelimited_1";

								StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
								if (rejected.promoID != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.promoID);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (rejected.orderer_surname != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.orderer_surname);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (rejected.orderer_taxCode != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.orderer_taxCode);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (rejected.orderer_VATRegistrationNumber != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.orderer_VATRegistrationNumber);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (rejected.residenceAddress_street != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.residenceAddress_street);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (rejected.residenceAddress_zipCode != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.residenceAddress_zipCode);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (rejected.residenceAddress_city != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.residenceAddress_city);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (rejected.residenceAddress_province != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.residenceAddress_province);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (rejected.orderer_email != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.orderer_email);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (rejected.totalItems != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.totalItems);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_tFileOutputDelimited_1);
								if (rejected.registrationDate != null) {
									sb_tFileOutputDelimited_1
											.append(rejected.registrationDate);
								}
								sb_tFileOutputDelimited_1
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

								nb_line_tFileOutputDelimited_1++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_1",
										nb_line_tFileOutputDelimited_1);

								outtFileOutputDelimited_1
										.write(sb_tFileOutputDelimited_1
												.toString());

								tos_count_tFileOutputDelimited_1++;

								/**
								 * [tFileOutputDelimited_1 main ] stop
								 */

							} // End of branch "rejected"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/ETL_FASTWEB/ZUORA/data/Order_list_Fastweb.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				try {
					if (batchSizeCounter_tMysqlOutput_1 != 0) {
						int countSum_tMysqlOutput_1 = 0;

						for (int countEach_tMysqlOutput_1 : pstmt_tMysqlOutput_1
								.executeBatch()) {
							countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_1 = 0;
					for (int countEach_tMysqlOutput_1 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0
								: countEach_tMysqlOutput_1);
					}

					insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_1 = 0;

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				if (commitCounter_tMysqlOutput_1 > 0) {

					conn_tMysqlOutput_1.commit();

				}

				conn_tMysqlOutput_1.close();

				resourceMap.put("finish_tMysqlOutput_1", true);

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFixedFlowInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (resourceMap.get("finish_tMysqlOutput_1") == null) {
					if (resourceMap.get("conn_tMysqlOutput_1") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_1")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
							String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :"
									+ sqlEx_tMysqlOutput_1.getMessage();

							System.err.println(errorMessage_tMysqlOutput_1);
						}
					}
				}

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class stage_OKStruct implements
			routines.system.IPersistableRow<stage_OKStruct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_ReadCSV = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_ReadCSV = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public Object stage;

		public Object getStage() {
			return this.stage;
		}

		public Object result;

		public Object getResult() {
			return this.result;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		public String server_url;

		public String getServer_url() {
			return this.server_url;
		}

		public String session;

		public String getSession() {
			return this.session;
		}

		public java.util.Date timestamp;

		public java.util.Date getTimestamp() {
			return this.timestamp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final stage_OKStruct other = (stage_OKStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(stage_OKStruct other) {

			other.id = this.id;
			other.stage = this.stage;
			other.result = this.result;
			other.error = this.error;
			other.server_url = this.server_url;
			other.session = this.session;
			other.timestamp = this.timestamp;

		}

		public void copyKeysDataTo(stage_OKStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_ReadCSV.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_ReadCSV.length == 0) {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_ReadCSV, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_ReadCSV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_ReadCSV) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.stage = (Object) dis.readObject();

					this.result = (Object) dis.readObject();

					this.error = readString(dis);

					this.server_url = readString(dis);

					this.session = readString(dis);

					this.timestamp = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// Object

				dos.writeObject(this.stage);

				// Object

				dos.writeObject(this.result);

				// String

				writeString(this.error, dos);

				// String

				writeString(this.server_url, dos);

				// String

				writeString(this.session, dos);

				// java.util.Date

				writeDate(this.timestamp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",stage=" + String.valueOf(stage));
			sb.append(",result=" + String.valueOf(result));
			sb.append(",error=" + error);
			sb.append(",server_url=" + server_url);
			sb.append(",session=" + session);
			sb.append(",timestamp=" + String.valueOf(timestamp));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(stage_OKStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_ReadCSV = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_ReadCSV = new byte[0];

		public String stage;

		public String getStage() {
			return this.stage;
		}

		public String result;

		public String getResult() {
			return this.result;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_ReadCSV.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_ReadCSV.length == 0) {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_ReadCSV, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_ReadCSV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_ReadCSV) {

				try {

					int length = 0;

					this.stage = readString(dis);

					this.result = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.stage, dos);

				// String

				writeString(this.result, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("stage=" + stage);
			sb.append(",result=" + result);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				stage_OKStruct stage_OK = new stage_OKStruct();

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				int tos_count_tMysqlOutput_2 = 0;

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "ots_job_state";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				String dbProperties_tMysqlOutput_2 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_2 = null;
				if (dbProperties_tMysqlOutput_2 == null
						|| dbProperties_tMysqlOutput_2.trim().length() == 0) {
					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "fw_zuora" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_2
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_2 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "fw_zuora" + "?"
							+ properties_tMysqlOutput_2;
				}
				String driverClass_tMysqlOutput_2 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_2 = "root";

				final String decryptedPassword_tMysqlOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;
				java.lang.Class.forName(driverClass_tMysqlOutput_2);

				conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_2, dbUser_tMysqlOutput_2,
						dbPwd_tMysqlOutput_2);

				resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
				conn_tMysqlOutput_2.setAutoCommit(false);
				int commitEvery_tMysqlOutput_2 = 10000;
				int commitCounter_tMysqlOutput_2 = 0;

				int count_tMysqlOutput_2 = 0;

				java.sql.Statement stmtTruncCount_tMysqlOutput_2 = conn_tMysqlOutput_2
						.createStatement();
				java.sql.ResultSet rsTruncCount_tMysqlOutput_2 = stmtTruncCount_tMysqlOutput_2
						.executeQuery("SELECT COUNT(1) FROM `"
								+ tableName_tMysqlOutput_2 + "`");
				int rsTruncCountNumber_tMysqlOutput_2 = 0;
				if (rsTruncCount_tMysqlOutput_2.next()) {
					rsTruncCountNumber_tMysqlOutput_2 = rsTruncCount_tMysqlOutput_2
							.getInt(1);
				}
				rsTruncCount_tMysqlOutput_2.close();
				stmtTruncCount_tMysqlOutput_2.close();
				java.sql.Statement stmtTrunc_tMysqlOutput_2 = conn_tMysqlOutput_2
						.createStatement();
				stmtTrunc_tMysqlOutput_2.executeUpdate("TRUNCATE TABLE `"
						+ tableName_tMysqlOutput_2 + "`");
				deletedCount_tMysqlOutput_2 += rsTruncCountNumber_tMysqlOutput_2;
				stmtTrunc_tMysqlOutput_2.close();

				String insert_tMysqlOutput_2 = "INSERT INTO `"
						+ "ots_job_state"
						+ "` (`id`,`stage`,`result`,`error`,`server_url`,`session`,`timestamp`) VALUES (?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_2 = 100;
				int batchSizeCounter_tMysqlOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insert_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				stage_OKStruct stage_OK_tmp = new stage_OKStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {

					row4.stage = "READ_CSV";

					row4.result = "OK";

					/**
					 * [tFixedFlowInput_1 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_1 main ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					tos_count_tFixedFlowInput_1++;

					/**
					 * [tFixedFlowInput_1 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						stage_OK = null;

						// # Output table : 'stage_OK'
						stage_OK_tmp.id = 0;
						stage_OK_tmp.stage = row4.stage;
						stage_OK_tmp.result = row4.result;
						stage_OK_tmp.error = null;
						stage_OK_tmp.server_url = null;
						stage_OK_tmp.session = null;
						stage_OK_tmp.timestamp = TalendDate.getCurrentDate();
						stage_OK = stage_OK_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "stage_OK"
					if (stage_OK != null) {

						/**
						 * [tMysqlOutput_2 main ] start
						 */

						currentComponent = "tMysqlOutput_2";

						whetherReject_tMysqlOutput_2 = false;
						pstmt_tMysqlOutput_2.setLong(1, stage_OK.id);

						if (stage_OK.stage == null) {
							pstmt_tMysqlOutput_2.setNull(2,
									java.sql.Types.OTHER);
						} else {
							pstmt_tMysqlOutput_2.setObject(2, stage_OK.stage);
						}

						if (stage_OK.result == null) {
							pstmt_tMysqlOutput_2.setNull(3,
									java.sql.Types.OTHER);
						} else {
							pstmt_tMysqlOutput_2.setObject(3, stage_OK.result);
						}

						if (stage_OK.error == null) {
							pstmt_tMysqlOutput_2.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_2.setString(4, stage_OK.error);
						}

						if (stage_OK.server_url == null) {
							pstmt_tMysqlOutput_2.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_2.setString(5,
									stage_OK.server_url);
						}

						if (stage_OK.session == null) {
							pstmt_tMysqlOutput_2.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_2.setString(6, stage_OK.session);
						}

						if (stage_OK.timestamp != null) {
							date_tMysqlOutput_2 = stage_OK.timestamp.getTime();
							if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
									|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
								pstmt_tMysqlOutput_2.setString(7,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tMysqlOutput_2.setTimestamp(7,
										new java.sql.Timestamp(
												date_tMysqlOutput_2));
							}
						} else {
							pstmt_tMysqlOutput_2
									.setNull(7, java.sql.Types.DATE);
						}

						pstmt_tMysqlOutput_2.addBatch();
						nb_line_tMysqlOutput_2++;

						batchSizeCounter_tMysqlOutput_2++;
						if (batchSize_tMysqlOutput_2 <= batchSizeCounter_tMysqlOutput_2) {
							try {
								int countSum_tMysqlOutput_2 = 0;
								for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
										.executeBatch()) {
									countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
											: 1);
								}
								insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tMysqlOutput_2 = 0;
								for (int countEach_tMysqlOutput_2 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
											: countEach_tMysqlOutput_2);
								}
								insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tMysqlOutput_2 = 0;
						}
						commitCounter_tMysqlOutput_2++;

						if (commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

							try {
								int countSum_tMysqlOutput_2 = 0;
								for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
										.executeBatch()) {
									countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
											: 1);
								}
								insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tMysqlOutput_2 = 0;
								for (int countEach_tMysqlOutput_2 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
											: countEach_tMysqlOutput_2);
								}
								insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
								System.err.println(e.getMessage());

							}
							conn_tMysqlOutput_2.commit();
							commitCounter_tMysqlOutput_2 = 0;

						}

						tos_count_tMysqlOutput_2++;

						/**
						 * [tMysqlOutput_2 main ] stop
						 */

					} // End of branch "stage_OK"

					/**
					 * [tFixedFlowInput_1 end ] start
					 */

					currentComponent = "tFixedFlowInput_1";

				}
				globalMap.put("tFixedFlowInput_1_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				try {
					if (batchSizeCounter_tMysqlOutput_2 != 0) {
						int countSum_tMysqlOutput_2 = 0;

						for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
								.executeBatch()) {
							countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_2 = 0;
					for (int countEach_tMysqlOutput_2 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
								: countEach_tMysqlOutput_2);
					}

					insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_2 = 0;

				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				if (commitCounter_tMysqlOutput_2 > 0) {

					conn_tMysqlOutput_2.commit();

				}

				conn_tMysqlOutput_2.close();

				resourceMap.put("finish_tMysqlOutput_2", true);

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;

				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				if (resourceMap.get("finish_tMysqlOutput_2") == null) {
					if (resourceMap.get("conn_tMysqlOutput_2") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_2")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
							String errorMessage_tMysqlOutput_2 = "failed to close the connection in tMysqlOutput_2 :"
									+ sqlEx_tMysqlOutput_2.getMessage();

							System.err.println(errorMessage_tMysqlOutput_2);
						}
					}
				}

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public static class stageKOStruct implements
			routines.system.IPersistableRow<stageKOStruct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_ReadCSV = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_ReadCSV = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id;

		public long getId() {
			return this.id;
		}

		public Object stage;

		public Object getStage() {
			return this.stage;
		}

		public Object result;

		public Object getResult() {
			return this.result;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		public String server_url;

		public String getServer_url() {
			return this.server_url;
		}

		public String session;

		public String getSession() {
			return this.session;
		}

		public java.util.Date timestamp;

		public java.util.Date getTimestamp() {
			return this.timestamp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final stageKOStruct other = (stageKOStruct) obj;

			if (this.id != other.id)
				return false;

			return true;
		}

		public void copyDataTo(stageKOStruct other) {

			other.id = this.id;
			other.stage = this.stage;
			other.result = this.result;
			other.error = this.error;
			other.server_url = this.server_url;
			other.session = this.session;
			other.timestamp = this.timestamp;

		}

		public void copyKeysDataTo(stageKOStruct other) {

			other.id = this.id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_ReadCSV.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_ReadCSV.length == 0) {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_ReadCSV, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_ReadCSV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_ReadCSV) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.stage = (Object) dis.readObject();

					this.result = (Object) dis.readObject();

					this.error = readString(dis);

					this.server_url = readString(dis);

					this.session = readString(dis);

					this.timestamp = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// Object

				dos.writeObject(this.stage);

				// Object

				dos.writeObject(this.result);

				// String

				writeString(this.error, dos);

				// String

				writeString(this.server_url, dos);

				// String

				writeString(this.session, dos);

				// java.util.Date

				writeDate(this.timestamp, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",stage=" + String.valueOf(stage));
			sb.append(",result=" + String.valueOf(result));
			sb.append(",error=" + error);
			sb.append(",server_url=" + server_url);
			sb.append(",session=" + session);
			sb.append(",timestamp=" + String.valueOf(timestamp));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(stageKOStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ZUORA_OTS_ReadCSV = new byte[0];
		static byte[] commonByteArray_ZUORA_OTS_ReadCSV = new byte[0];

		public String stage;

		public String getStage() {
			return this.stage;
		}

		public String result;

		public String getResult() {
			return this.result;
		}

		public String error;

		public String getError() {
			return this.error;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ZUORA_OTS_ReadCSV.length) {
					if (length < 1024
							&& commonByteArray_ZUORA_OTS_ReadCSV.length == 0) {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[1024];
					} else {
						commonByteArray_ZUORA_OTS_ReadCSV = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ZUORA_OTS_ReadCSV, 0, length);
				strReturn = new String(commonByteArray_ZUORA_OTS_ReadCSV, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ZUORA_OTS_ReadCSV) {

				try {

					int length = 0;

					this.stage = readString(dis);

					this.result = readString(dis);

					this.error = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.stage, dos);

				// String

				writeString(this.result, dos);

				// String

				writeString(this.error, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("stage=" + stage);
			sb.append(",result=" + result);
			sb.append(",error=" + error);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				stageKOStruct stageKO = new stageKOStruct();

				/**
				 * [tMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_3", false);
				start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_3";

				int tos_count_tMysqlOutput_3 = 0;

				int nb_line_tMysqlOutput_3 = 0;
				int nb_line_update_tMysqlOutput_3 = 0;
				int nb_line_inserted_tMysqlOutput_3 = 0;
				int nb_line_deleted_tMysqlOutput_3 = 0;
				int nb_line_rejected_tMysqlOutput_3 = 0;

				int deletedCount_tMysqlOutput_3 = 0;
				int updatedCount_tMysqlOutput_3 = 0;
				int insertedCount_tMysqlOutput_3 = 0;

				int rejectedCount_tMysqlOutput_3 = 0;

				String tableName_tMysqlOutput_3 = "ots_job_state";
				boolean whetherReject_tMysqlOutput_3 = false;

				java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime()
						.getTime();
				calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3
						.getTime().getTime();
				long date_tMysqlOutput_3;

				java.sql.Connection conn_tMysqlOutput_3 = null;
				String dbProperties_tMysqlOutput_3 = "noDatetimeStringSync=true";
				String url_tMysqlOutput_3 = null;
				if (dbProperties_tMysqlOutput_3 == null
						|| dbProperties_tMysqlOutput_3.trim().length() == 0) {
					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "fw_zuora" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tMysqlOutput_3 = "noDatetimeStringSync=true";
					if (!properties_tMysqlOutput_3
							.contains("rewriteBatchedStatements")) {
						properties_tMysqlOutput_3 += "&rewriteBatchedStatements=true";
					}

					url_tMysqlOutput_3 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "fw_zuora" + "?"
							+ properties_tMysqlOutput_3;
				}
				String driverClass_tMysqlOutput_3 = "org.gjt.mm.mysql.Driver";

				String dbUser_tMysqlOutput_3 = "root";

				final String decryptedPassword_tMysqlOutput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("7a440551249af37a");

				String dbPwd_tMysqlOutput_3 = decryptedPassword_tMysqlOutput_3;
				java.lang.Class.forName(driverClass_tMysqlOutput_3);

				conn_tMysqlOutput_3 = java.sql.DriverManager.getConnection(
						url_tMysqlOutput_3, dbUser_tMysqlOutput_3,
						dbPwd_tMysqlOutput_3);

				resourceMap.put("conn_tMysqlOutput_3", conn_tMysqlOutput_3);
				conn_tMysqlOutput_3.setAutoCommit(false);
				int commitEvery_tMysqlOutput_3 = 10000;
				int commitCounter_tMysqlOutput_3 = 0;

				int count_tMysqlOutput_3 = 0;

				java.sql.Statement stmtTruncCount_tMysqlOutput_3 = conn_tMysqlOutput_3
						.createStatement();
				java.sql.ResultSet rsTruncCount_tMysqlOutput_3 = stmtTruncCount_tMysqlOutput_3
						.executeQuery("SELECT COUNT(1) FROM `"
								+ tableName_tMysqlOutput_3 + "`");
				int rsTruncCountNumber_tMysqlOutput_3 = 0;
				if (rsTruncCount_tMysqlOutput_3.next()) {
					rsTruncCountNumber_tMysqlOutput_3 = rsTruncCount_tMysqlOutput_3
							.getInt(1);
				}
				rsTruncCount_tMysqlOutput_3.close();
				stmtTruncCount_tMysqlOutput_3.close();
				java.sql.Statement stmtTrunc_tMysqlOutput_3 = conn_tMysqlOutput_3
						.createStatement();
				stmtTrunc_tMysqlOutput_3.executeUpdate("TRUNCATE TABLE `"
						+ tableName_tMysqlOutput_3 + "`");
				deletedCount_tMysqlOutput_3 += rsTruncCountNumber_tMysqlOutput_3;
				stmtTrunc_tMysqlOutput_3.close();

				String insert_tMysqlOutput_3 = "INSERT INTO `"
						+ "ots_job_state"
						+ "` (`id`,`stage`,`result`,`error`,`server_url`,`session`,`timestamp`) VALUES (?,?,?,?,?,?,?)";
				int batchSize_tMysqlOutput_3 = 100;
				int batchSizeCounter_tMysqlOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3
						.prepareStatement(insert_tMysqlOutput_3);

				/**
				 * [tMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				stageKOStruct stageKO_tmp = new stageKOStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_2 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_2", false);
				start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_2";

				int tos_count_tFixedFlowInput_2 = 0;

				for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 1; i_tFixedFlowInput_2++) {

					row2.stage = "READ_CSV";

					row2.result = "KO";

					row2.error = "";

					/**
					 * [tFixedFlowInput_2 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_2 main ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					tos_count_tFixedFlowInput_2++;

					/**
					 * [tFixedFlowInput_2 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
						// ###############################
						// # Output tables

						stageKO = null;

						// # Output table : 'stageKO'
						stageKO_tmp.id = 0;
						stageKO_tmp.stage = row2.stage;
						stageKO_tmp.result = row2.result;
						stageKO_tmp.error = row2.error;
						stageKO_tmp.server_url = null;
						stageKO_tmp.session = null;
						stageKO_tmp.timestamp = TalendDate.getCurrentDate();
						stageKO = stageKO_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "stageKO"
					if (stageKO != null) {

						/**
						 * [tMysqlOutput_3 main ] start
						 */

						currentComponent = "tMysqlOutput_3";

						whetherReject_tMysqlOutput_3 = false;
						pstmt_tMysqlOutput_3.setLong(1, stageKO.id);

						if (stageKO.stage == null) {
							pstmt_tMysqlOutput_3.setNull(2,
									java.sql.Types.OTHER);
						} else {
							pstmt_tMysqlOutput_3.setObject(2, stageKO.stage);
						}

						if (stageKO.result == null) {
							pstmt_tMysqlOutput_3.setNull(3,
									java.sql.Types.OTHER);
						} else {
							pstmt_tMysqlOutput_3.setObject(3, stageKO.result);
						}

						if (stageKO.error == null) {
							pstmt_tMysqlOutput_3.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_3.setString(4, stageKO.error);
						}

						if (stageKO.server_url == null) {
							pstmt_tMysqlOutput_3.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_3.setString(5,
									stageKO.server_url);
						}

						if (stageKO.session == null) {
							pstmt_tMysqlOutput_3.setNull(6,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_3.setString(6, stageKO.session);
						}

						if (stageKO.timestamp != null) {
							date_tMysqlOutput_3 = stageKO.timestamp.getTime();
							if (date_tMysqlOutput_3 < year1_tMysqlOutput_3
									|| date_tMysqlOutput_3 >= year10000_tMysqlOutput_3) {
								pstmt_tMysqlOutput_3.setString(7,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tMysqlOutput_3.setTimestamp(7,
										new java.sql.Timestamp(
												date_tMysqlOutput_3));
							}
						} else {
							pstmt_tMysqlOutput_3
									.setNull(7, java.sql.Types.DATE);
						}

						pstmt_tMysqlOutput_3.addBatch();
						nb_line_tMysqlOutput_3++;

						batchSizeCounter_tMysqlOutput_3++;
						if (batchSize_tMysqlOutput_3 <= batchSizeCounter_tMysqlOutput_3) {
							try {
								int countSum_tMysqlOutput_3 = 0;
								for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
										.executeBatch()) {
									countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
											: 1);
								}
								insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tMysqlOutput_3 = 0;
								for (int countEach_tMysqlOutput_3 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
											: countEach_tMysqlOutput_3);
								}
								insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tMysqlOutput_3 = 0;
						}
						commitCounter_tMysqlOutput_3++;

						if (commitEvery_tMysqlOutput_3 <= commitCounter_tMysqlOutput_3) {

							try {
								int countSum_tMysqlOutput_3 = 0;
								for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
										.executeBatch()) {
									countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
											: 1);
								}
								insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tMysqlOutput_3 = 0;
								for (int countEach_tMysqlOutput_3 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
											: countEach_tMysqlOutput_3);
								}
								insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
								System.err.println(e.getMessage());

							}
							conn_tMysqlOutput_3.commit();
							commitCounter_tMysqlOutput_3 = 0;

						}

						tos_count_tMysqlOutput_3++;

						/**
						 * [tMysqlOutput_3 main ] stop
						 */

					} // End of branch "stageKO"

					/**
					 * [tFixedFlowInput_2 end ] start
					 */

					currentComponent = "tFixedFlowInput_2";

				}
				globalMap.put("tFixedFlowInput_2_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_2", true);
				end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMysqlOutput_3 end ] start
				 */

				currentComponent = "tMysqlOutput_3";

				try {
					if (batchSizeCounter_tMysqlOutput_3 != 0) {
						int countSum_tMysqlOutput_3 = 0;

						for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
								.executeBatch()) {
							countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_3 = 0;
					for (int countEach_tMysqlOutput_3 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
								: countEach_tMysqlOutput_3);
					}

					insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_3 = 0;

				if (pstmt_tMysqlOutput_3 != null) {

					pstmt_tMysqlOutput_3.close();

				}

				if (commitCounter_tMysqlOutput_3 > 0) {

					conn_tMysqlOutput_3.commit();

				}

				conn_tMysqlOutput_3.close();

				resourceMap.put("finish_tMysqlOutput_3", true);

				nb_line_deleted_tMysqlOutput_3 = nb_line_deleted_tMysqlOutput_3
						+ deletedCount_tMysqlOutput_3;
				nb_line_update_tMysqlOutput_3 = nb_line_update_tMysqlOutput_3
						+ updatedCount_tMysqlOutput_3;
				nb_line_inserted_tMysqlOutput_3 = nb_line_inserted_tMysqlOutput_3
						+ insertedCount_tMysqlOutput_3;
				nb_line_rejected_tMysqlOutput_3 = nb_line_rejected_tMysqlOutput_3
						+ rejectedCount_tMysqlOutput_3;

				globalMap.put("tMysqlOutput_3_NB_LINE", nb_line_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_3);

				ok_Hash.put("tMysqlOutput_3", true);
				end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_2 finally ] start
				 */

				currentComponent = "tFixedFlowInput_2";

				/**
				 * [tFixedFlowInput_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMysqlOutput_3 finally ] start
				 */

				currentComponent = "tMysqlOutput_3";

				if (resourceMap.get("finish_tMysqlOutput_3") == null) {
					if (resourceMap.get("conn_tMysqlOutput_3") != null) {
						try {

							((java.sql.Connection) resourceMap
									.get("conn_tMysqlOutput_3")).close();

						} catch (java.sql.SQLException sqlEx_tMysqlOutput_3) {
							String errorMessage_tMysqlOutput_3 = "failed to close the connection in tMysqlOutput_3 :"
									+ sqlEx_tMysqlOutput_3.getMessage();

							System.err.println(errorMessage_tMysqlOutput_3);
						}
					}
				}

				/**
				 * [tMysqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final OTS_ReadCSV OTS_ReadCSVClass = new OTS_ReadCSV();

		int exitCode = OTS_ReadCSVClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = OTS_ReadCSV.class.getClassLoader()
					.getResourceAsStream(
							"zuora/ots_readcsv_0_1/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : OTS_ReadCSV");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 206269 characters generated by Talend Open Studio for ESB on the 6 maggio
 * 2016 14.41.49 CEST
 ************************************************************************************************/
